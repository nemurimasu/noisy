var noisy=function(t){"use strict";function e(t,e){Object.defineProperty(t,"channelCount",{get:()=>e.channelCount}),Object.defineProperty(t,"channelCountMode",{get:()=>e.channelCountMode,set:t=>e.channelCountMode=t}),Object.defineProperty(t,"channelInterpretation",{get:()=>e.channelInterpretation,set:t=>e.channelInterpretation=t}),Object.defineProperty(t,"numberOfInputs",{get:()=>0}),Object.defineProperty(t,"numberOfOutputs",{get:()=>e.numberOfOutputs}),t.connect=e.connect.bind(e),t.disconnect=e.disconnect.bind(e)}var n={bufferSize:16384};class i{constructor(t){this.context=t,this.node=t.createScriptProcessor(n.bufferSize,0,2),this.node.onaudioprocess=(t=>{for(let e=0;e<2;e++){const n=t.outputBuffer.getChannelData(e);for(let t=0;t<n.length;t++)n[t]=2*Math.random()-1}}),e(this,this.node)}}class a{constructor(t){this.context=t,this.constant=t.createConstantSource(),this.audibleFrequencyNode=t.createGain(),this.beatFrequencyNode=t.createGain(),this.half=t.createGain(),this.half.gain.value=.5,this.inverseHalf=t.createGain(),this.inverseHalf.gain.value=-.5,this.left=t.createOscillator(),this.left.frequency.value=0,this.right=t.createOscillator(),this.right.frequency.value=0,this.merge=t.createChannelMerger(2),this.constant.connect(this.audibleFrequencyNode),this.constant.connect(this.beatFrequencyNode),this.beatFrequencyNode.connect(this.half),this.beatFrequencyNode.connect(this.inverseHalf),this.audibleFrequencyNode.connect(this.left.frequency),this.audibleFrequencyNode.connect(this.right.frequency),this.inverseHalf.connect(this.left.frequency),this.half.connect(this.right.frequency),this.left.connect(this.merge,0,0),this.right.connect(this.merge,0,1),e(this,this.merge)}get type(){return this.left.type}set type(t){this.left.type=t,this.right.type=t}get audibleFrequency(){return this.audibleFrequencyNode.gain}get beatFrequency(){return this.beatFrequencyNode.gain}start(...t){this.constant.start(...t),this.left.start(...t),this.right.start(...t)}stop(...t){this.constant.stop(...t),this.left.stop(...t),this.right.stop(...t)}setPeriodicWave(t){this.left.setPeriodicWave(t),this.right.setPeriodicWave(t)}}function s(t){const e=t.createChannelSplitter(2),i=t.createGain();i.gain.value=0,e.connect(i,0);const a=t.createGain();a.gain.value=0,e.connect(a,1);const s=t.createConstantSource(),r=t.createGain();s.connect(r),e.phase=r.gain;const o=t.createGain();s.connect(o),e.frequency=o.gain;const c=t.createChannelMerger(2);o.connect(c,0,0),r.connect(c,0,1);const h=t.createScriptProcessor(n.bufferSize,2,2);h.onaudioprocess=function(t){let e=0;return n=>{const i=n.inputBuffer.getChannelData(0),a=n.inputBuffer.getChannelData(1),s=n.outputBuffer.getChannelData(0),r=n.outputBuffer.getChannelData(1);let o;for(let n=0;n<i.length;n++)o=t/i[n],s[n]=3/(4+2*Math.sin(2*(e+n)*Math.PI/o-a[n]))-.5,r[n]=3/(4+2*Math.sin(2*(e+n)*Math.PI/o+a[n]))-.5;if(Number.isFinite(o)&&!Number.isNaN(o)){const t=Math.floor(o);0!=t&&(e=(e+i.length)%t)}}}(t.sampleRate),c.connect(h);const u=t.createChannelSplitter(2);h.connect(u),u.connect(i.gain,0),u.connect(a.gain,1);const l=t.createChannelMerger(2);return i.connect(l,0,0),a.connect(l,0,1),e._gmn=[i,a,s,r,o,c,h,u,l],e.connect=l.connect.bind(l),e.disconnect=l.connect.bind(l),s.start(),e}var r=Object.freeze({SelfHypnosis2:class{constructor(t){this.context=t,this.time=0,this.startClock=0,this.volume=.125,this.gain=t.createGain(),this.gain.gain.value=this.volume,this.binaural=new a(t),this.binaural.audibleFrequency.value=440,this.gainModulator=new s(t),this.gainModulator.phase.value=0,this.phaseWobble=t.createOscillator(),this.phaseWobble.frequency.value=8/900,this.phaseWobbleGain=t.createGain(),this.phaseWobbleGain.gain.value=Math.PI,this.noise=new i(t),this.noiseGainModulator=new s(t),this.noiseGainModulator.phase.value=Math.PI/6,this.noiseGain=t.createGain(),this.noiseGain.gain.value=.5,this.binaural2=new a(t),this.binaural2.audibleFrequency.value=100,this.binaural2.beatFrequency.value=7,this.binaural2Gain=t.createGain(),this.binaural2Gain.gain.value=.8,this.binaural3=new a(t),this.binaural3.audibleFrequency.value=800,this.binaural3.beatFrequency.value=13,this.binaural3GainModulator=new s(t),this.binaural3GainModulator.frequency.value=1,this.binaural3GainModulator.phase.value=Math.PI,this.binaural3Gain=t.createGain(),this.binaural3Gain.gain.value=.8,this.binaural4=new a(t),this.binaural4.audibleFrequency.value=440,this.binaural4.beatFrequency.value=10,this.binaural4Gain=t.createGain(),this.binaural4Gain.gain.value=.25}play(){this.startClock=this.context.currentTime;const t=this.startClock-this.time;this.binaural.beatFrequency.cancelScheduledValues(t),this.binaural.beatFrequency.setValueAtTime(12,t),this.binaural.beatFrequency.linearRampToValueAtTime(8,t+900),this.gainModulator.frequency.cancelScheduledValues(t),this.gainModulator.frequency.setValueAtTime(5,t),this.gainModulator.frequency.linearRampToValueAtTime(2.5,t+900),this.noiseGainModulator.frequency.cancelScheduledValues(t),this.noiseGainModulator.frequency.setValueAtTime(1,t),this.noiseGainModulator.frequency.linearRampToValueAtTime(2/3,t+900),this.gain.connect(this.context.destination),this.gainModulator.connect(this.gain),this.phaseWobbleGain.connect(this.gainModulator.phase),this.phaseWobble.connect(this.phaseWobbleGain),this.binaural.connect(this.gainModulator),this.noiseGain.connect(this.gain),this.noiseGainModulator.connect(this.noiseGain),this.noise.connect(this.noiseGainModulator),this.binaural2Gain.connect(this.gain),this.binaural2.connect(this.binaural2Gain),this.binaural3Gain.connect(this.gain),this.binaural3GainModulator.connect(this.binaural3Gain),this.binaural3.connect(this.binaural3GainModulator),this.binaural4Gain.connect(this.gain),this.binaural4.connect(this.binaural4Gain),this.binaural.start(),this.phaseWobble.start(),this.binaural2.start(),this.binaural3.start(),this.binaural4.start()}stop(){this.time=this.context.currentTime-this.startClock,this.binaural.stop(),this.phaseWobble.stop(),this.binaural2.stop(),this.binaural3.stop(),this.binaural4.stop(),this.gain.disconnect(this.context.destination),this.gainModulator.disconnect(this.gain),this.phaseWobbleGain.disconnect(this.gainModulator.phase),this.phaseWobble.disconnect(this.phaseWobbleGain),this.binaural.disconnect(this.gainModulator),this.noiseGain.disconnect(this.gain),this.noiseGainModulator.disconnect(this.noiseGain),this.noise.disconnect(this.noiseGainModulator),this.binaural2Gain.disconnect(this.gain),this.binaural2.disconnect(this.binaural2Gain),this.binaural3Gain.disconnect(this.gain),this.binaural3GainModulator.disconnect(this.binaural3Gain),this.binaural3.disconnect(this.binaural3GainModulator),this.binaural4Gain.disconnect(this.gain),this.binaural4.disconnect(this.binaural4Gain)}}}),o=Object.freeze({BinauralSourceNode:a,GainModulatorNode:s,NoiseSourceNode:i});return t.nodes=o,t.presets=r,t}({});
//# sourceMappingURL=noisy.min.js.map
