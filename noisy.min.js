!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):"object"==typeof exports?exports.noisy=e():t.noisy=e()}(this,function(){return function(t){function e(i){if(n[i])return n[i].exports;var a=n[i]={exports:{},id:i,loaded:!1};return t[i].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){t.exports={presets:{SelfHypnosis2:n(7)},nodes:{BinauralSourceNode:n(3),GainModulatorNode:n(5),NoiseSourceNode:n(6)}}},function(t){t.exports={bufferSize:16384}},function(t){t.exports={wrap:function(t,e){return Object.defineProperty(t,"channelCount",{get:function(){return e.channelCount}}),Object.defineProperty(t,"channelCountMode",{get:function(){return e.channelCountMode},set:function(t){return e.channelCountMode=t}}),Object.defineProperty(t,"channelInterpretation",{get:function(){return e.channelInterpretation},set:function(t){return e.channelInterpretation=t}}),Object.defineProperty(t,"numberOfInputs",{get:function(){return 0}}),Object.defineProperty(t,"numberOfOutputs",{get:function(){return e.numberOfOutputs}}),t.connect=e.connect.bind(e),t.disconnect=e.disconnect.bind(e)}}},function(t,e,n){var i,a,r,s,o,c=[].slice;s=n(2),a=n(4),r=n(1),o=function(t){var e,n,i,a,r,s,o,c;for(e=t.inputBuffer.getChannelData(0),n=t.inputBuffer.getChannelData(1),r=t.outputBuffer.getChannelData(0),s=t.outputBuffer.getChannelData(1),a=o=0,c=e.length;c>=0?c>=o:o>=c;a=c>=0?++o:--o)i=.5*n[a],r[a]=e[a]-i,s[a]=e[a]+i;return void 0},i=function(){function t(t){this.context=t,this.constant=new a(this.context,1),this.audibleFrequencyNode=this.context.createGain(),this.beatFrequencyNode=this.context.createGain(),this.inputMerge=this.context.createChannelMerger(2),this.script=this.context.createScriptProcessor(r.bufferSize,2,2),this.script.onaudioprocess=o,this.split=this.context.createChannelSplitter(2),this.left=this.context.createOscillator(),this.left.frequency.value=0,this.right=this.context.createOscillator(),this.right.frequency.value=0,this.merge=this.context.createChannelMerger(2),this.constant.connect(this.audibleFrequencyNode),this.constant.connect(this.beatFrequencyNode),this.audibleFrequencyNode.connect(this.inputMerge,0,0),this.beatFrequencyNode.connect(this.inputMerge,0,1),this.inputMerge.connect(this.script),this.script.connect(this.split),this.split.connect(this.left.frequency,0),this.split.connect(this.right.frequency,1),this.left.connect(this.merge,0,0),this.right.connect(this.merge,0,1),s.wrap(this,this.merge),Object.defineProperty(this,"type",{get:function(t){return function(){return t.left.type}}(this),set:function(t){return function(e){return t.left.type=e,t.right.type=e}}(this)}),Object.defineProperty(this,"audibleFrequency",{get:function(t){return function(){return t.audibleFrequencyNode.gain}}(this)}),Object.defineProperty(this,"beatFrequency",{get:function(t){return function(){return t.beatFrequencyNode.gain}}(this)})}return t.prototype.start=function(){var t,e,n,i;return t=1<=arguments.length?c.call(arguments,0):[],(e=this.constant).start.apply(e,t),(n=this.left).start.apply(n,t),(i=this.right).start.apply(i,t)},t.prototype.stop=function(){var t,e,n,i;return t=1<=arguments.length?c.call(arguments,0):[],(e=this.constant).stop.apply(e,t),(n=this.left).stop.apply(n,t),(i=this.right).stop.apply(i,t)},t.prototype.setPeriodicWave=function(t){return this.left.setPeriodicWave(t),this.right.setPeriodicWave(t)},t}(),t.exports=i},function(t,e,n){var i,a,r;r=n(2),a=n(1),i=function(){function t(t,e){var n,i,s,o,c;if(this.context=t,n=this.context.createBuffer(1,a.bufferSize,this.context.sampleRate),i=n.getChannelData(0),i.fill)i.fill(1);else for(s=o=0,c=i.length;c>=0?c>o:o>c;s=c>=0?++o:--o)i[s]=e;this.node=this.context.createBufferSource(),this.node.buffer=n,this.node.loop=!0,r.wrap(this,this.node),this.start=this.node.start.bind(this.node),this.stop=this.node.stop.bind(this.node)}return t}(),t.exports=i},function(t,e,n){var i,a,r,s;i=n(4),s=n(1),r=function(t){var e;return e=0,function(n){var i,a,r,s,o,c,u,h,l;for(i=n.inputBuffer.getChannelData(0),c=n.inputBuffer.getChannelData(1),r=n.outputBuffer.getChannelData(0),u=n.outputBuffer.getChannelData(1),a=h=0,l=i.length;l>=0?l>h:h>l;a=l>=0?++h:--h)o=t/i[a],r[a]=-.5+3/(4+2*Math.sin(2*(e+a)*Math.PI/o-c[a])),u[a]=-.5+3/(4+2*Math.sin(2*(e+a)*Math.PI/o+c[a]));return Number.isFinite(o)&&!Number.isNaN(o)&&(s=Math.floor(o),0!==s)?e=(e+i.length)%s:void 0}},a=function(t){var e,n,a,o,c,u,h,l,p,f;return u=t.createChannelSplitter(2),a=t.createGain(),a.gain.value=0,u.connect(a,0),h=t.createGain(),h.gain.value=0,u.connect(h,1),e=new i(t,1),c=t.createGain(),e.connect(c),u.phase=c.gain,n=t.createGain(),e.connect(n),u.frequency=n.gain,p=t.createChannelMerger(2),n.connect(p,0,0),c.connect(p,0,1),l=t.createScriptProcessor(s.bufferSize,2,2),l.onaudioprocess=new r(t.sampleRate),p.connect(l),f=t.createChannelSplitter(2),l.connect(f),f.connect(a.gain,0),f.connect(h.gain,1),o=t.createChannelMerger(2),a.connect(o,0,0),h.connect(o,0,1),u._gmn=[a,h,e,c,n,p,l,f,o],u.connect=o.connect.bind(o),e.start(),u},t.exports=a},function(t,e,n){var i,a,r;r=n(2),a=n(1),i=function(){function t(t){this.context=t,this.node=this.context.createScriptProcessor(a.bufferSize,0,2),this.node.onaudioprocess=function(t){var e,n,i,a,r,s;for(e=a=0;1>=a;e=++a)for(n=t.outputBuffer.getChannelData(e),i=r=0,s=n.length;s>=0?s>r:r>s;i=s>=0?++r:--r)n[i]=2*Math.random()-1;return void 0},r.wrap(this,this.node)}return t}(),t.exports=i},function(t,e,n){var i,a,r,s;r=n(6),i=n(3),a=n(5),s=function(){function t(t){this.context=t,this.time=0,this.plannedTime=0,this.startClock=0,this.volume=.125,this.gain=this.context.createGain(),this.gain.gain.value=this.volume,this.binaural=new i(this.context),this.binaural.audibleFrequency.value=440,this.gainModulator=new a(this.context),this.gainModulator.phase.value=0,this.phaseWobble=this.context.createOscillator(),this.phaseWobble.frequency.value=8/900,this.phaseWobbleGain=this.context.createGain(),this.phaseWobbleGain.gain.value=Math.PI,this.noise=new r(this.context),this.noiseGainModulator=new a(this.context),this.noiseGainModulator.phase.value=Math.PI/6,this.noiseGain=this.context.createGain(),this.noiseGain.gain.value=.5,this.binaural2=new i(this.context),this.binaural2.audibleFrequency.value=100,this.binaural2.beatFrequency.value=7,this.binaural2Gain=this.context.createGain(),this.binaural2Gain.gain.value=.8,this.binaural3=new i(this.context),this.binaural3.audibleFrequency.value=800,this.binaural3.beatFrequency.value=13,this.binaural3GainModulator=new a(this.context),this.binaural3GainModulator.frequency.value=1,this.binaural3GainModulator.phase.value=Math.PI,this.binaural3Gain=this.context.createGain(),this.binaural3Gain.gain.value=.8,this.binaural4=new i(this.context),this.binaural4.audibleFrequency.value=440,this.binaural4.beatFrequency.value=10,this.binaural4Gain=this.context.createGain(),this.binaural4Gain.gain.value=.25}return t.prototype.play=function(){var t;return this.startClock=this.context.currentTime,t=this.startClock-this.time,this.binaural.beatFrequency.cancelScheduledValues(t),this.binaural.beatFrequency.setValueAtTime(12,t),this.binaural.beatFrequency.linearRampToValueAtTime(8,t+900),this.gainModulator.frequency.cancelScheduledValues(t),this.gainModulator.frequency.setValueAtTime(5,t),this.gainModulator.frequency.linearRampToValueAtTime(2.5,t+900),this.noiseGainModulator.frequency.cancelScheduledValues(t),this.noiseGainModulator.frequency.setValueAtTime(1,t),this.noiseGainModulator.frequency.linearRampToValueAtTime(2/3,t+900),this.gain.connect(this.context.destination),this.gainModulator.connect(this.gain),this.phaseWobbleGain.connect(this.gainModulator.phase),this.phaseWobble.connect(this.phaseWobbleGain),this.binaural.connect(this.gainModulator),this.noiseGain.connect(this.gain),this.noiseGainModulator.connect(this.noiseGain),this.noise.connect(this.noiseGainModulator),this.binaural2Gain.connect(this.gain),this.binaural2.connect(this.binaural2Gain),this.binaural3Gain.connect(this.gain),this.binaural3GainModulator.connect(this.binaural3Gain),this.binaural3.connect(this.binaural3GainModulator),this.binaural4Gain.connect(this.gain),this.binaural4.connect(this.binaural4Gain),this.binaural.start(),this.phaseWobble.start(),this.binaural2.start(),this.binaural3.start(),this.binaural4.start()},t.prototype.stop=function(){return this.time=this.context.currentTime-this.startClock,this.binaural.stop(),this.phaseWobble.stop(),this.binaural2.stop(),this.binaural3.stop(),this.binaural4.stop(),this.gain.disconnect(this.context.destination),this.gainModulator.disconnect(this.gain),this.phaseWobbleGain.disconnect(this.gainModulator.phase),this.phaseWobble.disconnect(this.phaseWobbleGain),this.binaural.disconnect(this.gainModulator),this.noiseGain.disconnect(this.gain),this.noiseGainModulator.disconnect(this.noiseGain),this.noise.disconnect(this.noiseGainModulator),this.binaural2Gain.disconnect(this.gain),this.binaural2.disconnect(this.binaural2Gain),this.binaural3Gain.disconnect(this.gain),this.binaural3GainModulator.disconnect(this.binaural3Gain),this.binaural3.disconnect(this.binaural3GainModulator),this.binaural4Gain.disconnect(this.gain),this.binaural4.disconnect(this.binaural4Gain)},t}(),t.exports=s}])});
//# sourceMappingURL=noisy.min.js.map