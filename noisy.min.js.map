{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///noisy.min.js","webpack:///webpack/bootstrap 0a5d783bc00d3fd43524","webpack:///./src/index.coffee","webpack:///./src/audioConfig.coffee","webpack:///./src/js-source-utils.coffee","webpack:///./src/nodes/BinauralSourceNode.coffee","webpack:///./src/nodes/ConstantSourceNode.coffee","webpack:///./src/nodes/GainModulatorNode.coffee","webpack:///./src/nodes/NoiseSourceNode.coffee","webpack:///./src/presets/SelfHypnosis2.coffee"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","presets","SelfHypnosis2","nodes","BinauralSourceNode","GainModulatorNode","NoiseSourceNode","bufferSize","wrap","jsNode","nativeNode","Object","defineProperty","get","channelCount","channelCountMode","set","v","channelInterpretation","numberOfOutputs","connect","bind","disconnect","ConstantSourceNode","audioConfig","jsSourceUtils","__slice","slice","context","constant","audibleFrequencyNode","createGain","beatFrequencyNode","half","gain","value","inverseHalf","left","createOscillator","frequency","right","merge","createChannelMerger","_this","type","prototype","start","args","_ref","_ref1","_ref2","arguments","length","apply","stop","setPeriodicWave","periodicWave","buffer","data","i","_i","createBuffer","sampleRate","getChannelData","fill","node","createBufferSource","loop","Processor","samples","audioProcessingEvent","frequencyValues","leftGainValues","mod","periodInSamples","phaseValues","rightGainValues","inputBuffer","outputBuffer","Math","sin","PI","Number","isFinite","isNaN","floor","frequencyNode","leftGain","outputMerge","phaseNode","result","rightGain","script","scriptInputMerge","scriptOutputSplit","createChannelSplitter","phase","createScriptProcessor","onaudioprocess","_gmn","channel","_j","random","time","startClock","volume","binaural","audibleFrequency","gainModulator","phaseWobble","phaseWobbleGain","noise","noiseGainModulator","noiseGain","binaural2","beatFrequency","binaural2Gain","binaural3","binaural3GainModulator","binaural3Gain","binaural4","binaural4Gain","play","startTime","currentTime","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","destination"],"mappings":"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","file":"noisy.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"noisy\"] = factory();\n\telse\n\t\troot[\"noisy\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"noisy\"] = factory();\n\telse\n\t\troot[\"noisy\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  presets: {\n\t    SelfHypnosis2: __webpack_require__(7)\n\t  },\n\t  nodes: {\n\t    BinauralSourceNode: __webpack_require__(3),\n\t    GainModulatorNode: __webpack_require__(5),\n\t    NoiseSourceNode: __webpack_require__(6)\n\t  }\n\t};\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  bufferSize: 16384\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  wrap: function(jsNode, nativeNode) {\n\t    Object.defineProperty(jsNode, 'channelCount', {\n\t      get: function() {\n\t        return nativeNode.channelCount;\n\t      }\n\t    });\n\t    Object.defineProperty(jsNode, 'channelCountMode', {\n\t      get: function() {\n\t        return nativeNode.channelCountMode;\n\t      },\n\t      set: function(v) {\n\t        return nativeNode.channelCountMode = v;\n\t      }\n\t    });\n\t    Object.defineProperty(jsNode, 'channelInterpretation', {\n\t      get: function() {\n\t        return nativeNode.channelInterpretation;\n\t      },\n\t      set: function(v) {\n\t        return nativeNode.channelInterpretation = v;\n\t      }\n\t    });\n\t    Object.defineProperty(jsNode, 'numberOfInputs', {\n\t      get: function() {\n\t        return 0;\n\t      }\n\t    });\n\t    Object.defineProperty(jsNode, 'numberOfOutputs', {\n\t      get: function() {\n\t        return nativeNode.numberOfOutputs;\n\t      }\n\t    });\n\t    jsNode.connect = nativeNode.connect.bind(nativeNode);\n\t    return jsNode.disconnect = nativeNode.disconnect.bind(nativeNode);\n\t  }\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BinauralSourceNode, ConstantSourceNode, audioConfig, jsSourceUtils,\n\t  __slice = [].slice;\n\t\n\tjsSourceUtils = __webpack_require__(2);\n\t\n\tConstantSourceNode = __webpack_require__(4);\n\t\n\taudioConfig = __webpack_require__(1);\n\t\n\tBinauralSourceNode = (function() {\n\t  function BinauralSourceNode(context) {\n\t    this.context = context;\n\t    this.constant = new ConstantSourceNode(this.context, 1.0);\n\t    this.audibleFrequencyNode = this.context.createGain();\n\t    this.beatFrequencyNode = this.context.createGain();\n\t    this.half = this.context.createGain();\n\t    this.half.gain.value = 0.5;\n\t    this.inverseHalf = this.context.createGain();\n\t    this.inverseHalf.gain.value = -0.5;\n\t    this.left = this.context.createOscillator();\n\t    this.left.frequency.value = 0.0;\n\t    this.right = this.context.createOscillator();\n\t    this.right.frequency.value = 0.0;\n\t    this.merge = this.context.createChannelMerger(2);\n\t    this.constant.connect(this.audibleFrequencyNode);\n\t    this.constant.connect(this.beatFrequencyNode);\n\t    this.beatFrequencyNode.connect(this.half);\n\t    this.beatFrequencyNode.connect(this.inverseHalf);\n\t    this.audibleFrequencyNode.connect(this.left.frequency);\n\t    this.audibleFrequencyNode.connect(this.right.frequency);\n\t    this.inverseHalf.connect(this.left.frequency);\n\t    this.half.connect(this.right.frequency);\n\t    this.left.connect(this.merge, 0, 0);\n\t    this.right.connect(this.merge, 0, 1);\n\t    jsSourceUtils.wrap(this, this.merge);\n\t    Object.defineProperty(this, 'type', {\n\t      get: (function(_this) {\n\t        return function() {\n\t          return _this.left.type;\n\t        };\n\t      })(this),\n\t      set: (function(_this) {\n\t        return function(v) {\n\t          _this.left.type = v;\n\t          return _this.right.type = v;\n\t        };\n\t      })(this)\n\t    });\n\t    Object.defineProperty(this, 'audibleFrequency', {\n\t      get: (function(_this) {\n\t        return function() {\n\t          return _this.audibleFrequencyNode.gain;\n\t        };\n\t      })(this)\n\t    });\n\t    Object.defineProperty(this, 'beatFrequency', {\n\t      get: (function(_this) {\n\t        return function() {\n\t          return _this.beatFrequencyNode.gain;\n\t        };\n\t      })(this)\n\t    });\n\t  }\n\t\n\t  BinauralSourceNode.prototype.start = function() {\n\t    var args, _ref, _ref1, _ref2;\n\t    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\t    (_ref = this.constant).start.apply(_ref, args);\n\t    (_ref1 = this.left).start.apply(_ref1, args);\n\t    return (_ref2 = this.right).start.apply(_ref2, args);\n\t  };\n\t\n\t  BinauralSourceNode.prototype.stop = function() {\n\t    var args, _ref, _ref1, _ref2;\n\t    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\t    (_ref = this.constant).stop.apply(_ref, args);\n\t    (_ref1 = this.left).stop.apply(_ref1, args);\n\t    return (_ref2 = this.right).stop.apply(_ref2, args);\n\t  };\n\t\n\t  BinauralSourceNode.prototype.setPeriodicWave = function(periodicWave) {\n\t    this.left.setPeriodicWave(periodicWave);\n\t    return this.right.setPeriodicWave(periodicWave);\n\t  };\n\t\n\t  return BinauralSourceNode;\n\t\n\t})();\n\t\n\tmodule.exports = BinauralSourceNode;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar ConstantSourceNode, audioConfig, jsSourceUtils;\n\t\n\tjsSourceUtils = __webpack_require__(2);\n\t\n\taudioConfig = __webpack_require__(1);\n\t\n\tConstantSourceNode = (function() {\n\t  function ConstantSourceNode(context, value) {\n\t    var buffer, data, i, _i, _ref;\n\t    this.context = context;\n\t    buffer = this.context.createBuffer(1, audioConfig.bufferSize, this.context.sampleRate);\n\t    data = buffer.getChannelData(0);\n\t    if (data.fill) {\n\t      data.fill(1.0);\n\t    } else {\n\t      for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n\t        data[i] = value;\n\t      }\n\t    }\n\t    this.node = this.context.createBufferSource();\n\t    this.node.buffer = buffer;\n\t    this.node.loop = true;\n\t    jsSourceUtils.wrap(this, this.node);\n\t    this.start = this.node.start.bind(this.node);\n\t    this.stop = this.node.stop.bind(this.node);\n\t  }\n\t\n\t  return ConstantSourceNode;\n\t\n\t})();\n\t\n\tmodule.exports = ConstantSourceNode;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar ConstantSourceNode, GainModulatorNode, Processor, audioConfig;\n\t\n\tConstantSourceNode = __webpack_require__(4);\n\t\n\taudioConfig = __webpack_require__(1);\n\t\n\tProcessor = function(sampleRate) {\n\t  var samples;\n\t  samples = 0;\n\t  return function(audioProcessingEvent) {\n\t    var frequencyValues, i, leftGainValues, mod, periodInSamples, phaseValues, rightGainValues, _i, _ref;\n\t    frequencyValues = audioProcessingEvent.inputBuffer.getChannelData(0);\n\t    phaseValues = audioProcessingEvent.inputBuffer.getChannelData(1);\n\t    leftGainValues = audioProcessingEvent.outputBuffer.getChannelData(0);\n\t    rightGainValues = audioProcessingEvent.outputBuffer.getChannelData(1);\n\t    for (i = _i = 0, _ref = frequencyValues.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n\t      periodInSamples = sampleRate / frequencyValues[i];\n\t      leftGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin((samples + i) * 2 * Math.PI / periodInSamples - phaseValues[i]));\n\t      rightGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin((samples + i) * 2 * Math.PI / periodInSamples + phaseValues[i]));\n\t    }\n\t    if ((Number.isFinite(periodInSamples)) && !(Number.isNaN(periodInSamples))) {\n\t      mod = Math.floor(periodInSamples);\n\t      if (mod !== 0) {\n\t        return samples = (samples + frequencyValues.length) % mod;\n\t      }\n\t    }\n\t  };\n\t};\n\t\n\tGainModulatorNode = function(context) {\n\t  var constant, frequencyNode, leftGain, outputMerge, phaseNode, result, rightGain, script, scriptInputMerge, scriptOutputSplit;\n\t  result = context.createChannelSplitter(2);\n\t  leftGain = context.createGain();\n\t  leftGain.gain.value = 0.0;\n\t  result.connect(leftGain, 0);\n\t  rightGain = context.createGain();\n\t  rightGain.gain.value = 0.0;\n\t  result.connect(rightGain, 1);\n\t  constant = new ConstantSourceNode(context, 1.0);\n\t  phaseNode = context.createGain();\n\t  constant.connect(phaseNode);\n\t  result.phase = phaseNode.gain;\n\t  frequencyNode = context.createGain();\n\t  constant.connect(frequencyNode);\n\t  result.frequency = frequencyNode.gain;\n\t  scriptInputMerge = context.createChannelMerger(2);\n\t  frequencyNode.connect(scriptInputMerge, 0, 0);\n\t  phaseNode.connect(scriptInputMerge, 0, 1);\n\t  script = context.createScriptProcessor(audioConfig.bufferSize, 2, 2);\n\t  script.onaudioprocess = new Processor(context.sampleRate);\n\t  scriptInputMerge.connect(script);\n\t  scriptOutputSplit = context.createChannelSplitter(2);\n\t  script.connect(scriptOutputSplit);\n\t  scriptOutputSplit.connect(leftGain.gain, 0);\n\t  scriptOutputSplit.connect(rightGain.gain, 1);\n\t  outputMerge = context.createChannelMerger(2);\n\t  leftGain.connect(outputMerge, 0, 0);\n\t  rightGain.connect(outputMerge, 0, 1);\n\t  result._gmn = [leftGain, rightGain, constant, phaseNode, frequencyNode, scriptInputMerge, script, scriptOutputSplit, outputMerge];\n\t  result.connect = outputMerge.connect.bind(outputMerge);\n\t  constant.start();\n\t  return result;\n\t};\n\t\n\tmodule.exports = GainModulatorNode;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar NoiseSourceNode, audioConfig, jsSourceUtils;\n\t\n\tjsSourceUtils = __webpack_require__(2);\n\t\n\taudioConfig = __webpack_require__(1);\n\t\n\tNoiseSourceNode = (function() {\n\t  function NoiseSourceNode(context) {\n\t    this.context = context;\n\t    this.node = this.context.createScriptProcessor(audioConfig.bufferSize, 0, 2);\n\t    this.node.onaudioprocess = function(audioProcessingEvent) {\n\t      var channel, data, i, _i, _j, _ref;\n\t      for (channel = _i = 0; _i <= 1; channel = ++_i) {\n\t        data = audioProcessingEvent.outputBuffer.getChannelData(channel);\n\t        for (i = _j = 0, _ref = data.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {\n\t          data[i] = 2 * Math.random() - 1;\n\t        }\n\t      }\n\t      return void 0;\n\t    };\n\t    jsSourceUtils.wrap(this, this.node);\n\t  }\n\t\n\t  return NoiseSourceNode;\n\t\n\t})();\n\t\n\tmodule.exports = NoiseSourceNode;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BinauralSourceNode, GainModulatorNode, NoiseSourceNode, SelfHypnosis2;\n\t\n\tNoiseSourceNode = __webpack_require__(6);\n\t\n\tBinauralSourceNode = __webpack_require__(3);\n\t\n\tGainModulatorNode = __webpack_require__(5);\n\t\n\tSelfHypnosis2 = (function() {\n\t  function SelfHypnosis2(context) {\n\t    this.context = context;\n\t    this.time = 0;\n\t    this.startClock = 0;\n\t    this.volume = 0.125;\n\t    this.gain = this.context.createGain();\n\t    this.gain.gain.value = this.volume;\n\t    this.binaural = new BinauralSourceNode(this.context);\n\t    this.binaural.audibleFrequency.value = 440;\n\t    this.gainModulator = new GainModulatorNode(this.context);\n\t    this.gainModulator.phase.value = 0.0;\n\t    this.phaseWobble = this.context.createOscillator();\n\t    this.phaseWobble.frequency.value = 8.0 / (15.0 * 60.0);\n\t    this.phaseWobbleGain = this.context.createGain();\n\t    this.phaseWobbleGain.gain.value = Math.PI;\n\t    this.noise = new NoiseSourceNode(this.context);\n\t    this.noiseGainModulator = new GainModulatorNode(this.context);\n\t    this.noiseGainModulator.phase.value = Math.PI / 6;\n\t    this.noiseGain = this.context.createGain();\n\t    this.noiseGain.gain.value = 0.5;\n\t    this.binaural2 = new BinauralSourceNode(this.context);\n\t    this.binaural2.audibleFrequency.value = 100;\n\t    this.binaural2.beatFrequency.value = 7;\n\t    this.binaural2Gain = this.context.createGain();\n\t    this.binaural2Gain.gain.value = 0.8;\n\t    this.binaural3 = new BinauralSourceNode(this.context);\n\t    this.binaural3.audibleFrequency.value = 800;\n\t    this.binaural3.beatFrequency.value = 13;\n\t    this.binaural3GainModulator = new GainModulatorNode(this.context);\n\t    this.binaural3GainModulator.frequency.value = 1.0;\n\t    this.binaural3GainModulator.phase.value = Math.PI;\n\t    this.binaural3Gain = this.context.createGain();\n\t    this.binaural3Gain.gain.value = 0.8;\n\t    this.binaural4 = new BinauralSourceNode(this.context);\n\t    this.binaural4.audibleFrequency.value = 440;\n\t    this.binaural4.beatFrequency.value = 10;\n\t    this.binaural4Gain = this.context.createGain();\n\t    this.binaural4Gain.gain.value = 0.25;\n\t  }\n\t\n\t  SelfHypnosis2.prototype.play = function() {\n\t    var startTime;\n\t    this.startClock = this.context.currentTime;\n\t    startTime = this.startClock - this.time;\n\t    this.binaural.beatFrequency.cancelScheduledValues(startTime);\n\t    this.binaural.beatFrequency.setValueAtTime(12, startTime);\n\t    this.binaural.beatFrequency.linearRampToValueAtTime(8, startTime + 15 * 60);\n\t    this.gainModulator.frequency.cancelScheduledValues(startTime);\n\t    this.gainModulator.frequency.setValueAtTime(5, startTime);\n\t    this.gainModulator.frequency.linearRampToValueAtTime(2.5, startTime + 15 * 60);\n\t    this.noiseGainModulator.frequency.cancelScheduledValues(startTime);\n\t    this.noiseGainModulator.frequency.setValueAtTime(1, startTime);\n\t    this.noiseGainModulator.frequency.linearRampToValueAtTime(2.0 / 3.0, startTime + 15 * 60);\n\t    this.gain.connect(this.context.destination);\n\t    this.gainModulator.connect(this.gain);\n\t    this.phaseWobbleGain.connect(this.gainModulator.phase);\n\t    this.phaseWobble.connect(this.phaseWobbleGain);\n\t    this.binaural.connect(this.gainModulator);\n\t    this.noiseGain.connect(this.gain);\n\t    this.noiseGainModulator.connect(this.noiseGain);\n\t    this.noise.connect(this.noiseGainModulator);\n\t    this.binaural2Gain.connect(this.gain);\n\t    this.binaural2.connect(this.binaural2Gain);\n\t    this.binaural3Gain.connect(this.gain);\n\t    this.binaural3GainModulator.connect(this.binaural3Gain);\n\t    this.binaural3.connect(this.binaural3GainModulator);\n\t    this.binaural4Gain.connect(this.gain);\n\t    this.binaural4.connect(this.binaural4Gain);\n\t    this.binaural.start();\n\t    this.phaseWobble.start();\n\t    this.binaural2.start();\n\t    this.binaural3.start();\n\t    return this.binaural4.start();\n\t  };\n\t\n\t  SelfHypnosis2.prototype.stop = function() {\n\t    this.time = this.context.currentTime - this.startClock;\n\t    this.binaural.stop();\n\t    this.phaseWobble.stop();\n\t    this.binaural2.stop();\n\t    this.binaural3.stop();\n\t    this.binaural4.stop();\n\t    this.gain.disconnect(this.context.destination);\n\t    this.gainModulator.disconnect(this.gain);\n\t    this.phaseWobbleGain.disconnect(this.gainModulator.phase);\n\t    this.phaseWobble.disconnect(this.phaseWobbleGain);\n\t    this.binaural.disconnect(this.gainModulator);\n\t    this.noiseGain.disconnect(this.gain);\n\t    this.noiseGainModulator.disconnect(this.noiseGain);\n\t    this.noise.disconnect(this.noiseGainModulator);\n\t    this.binaural2Gain.disconnect(this.gain);\n\t    this.binaural2.disconnect(this.binaural2Gain);\n\t    this.binaural3Gain.disconnect(this.gain);\n\t    this.binaural3GainModulator.disconnect(this.binaural3Gain);\n\t    this.binaural3.disconnect(this.binaural3GainModulator);\n\t    this.binaural4Gain.disconnect(this.gain);\n\t    return this.binaural4.disconnect(this.binaural4Gain);\n\t  };\n\t\n\t  return SelfHypnosis2;\n\t\n\t})();\n\t\n\tmodule.exports = SelfHypnosis2;\n\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** noisy.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0a5d783bc00d3fd43524\n **/","module.exports =\n  presets:\n    SelfHypnosis2: require './presets/SelfHypnosis2'\n  nodes:\n    BinauralSourceNode: require './nodes/BinauralSourceNode'\n    GainModulatorNode: require './nodes/GainModulatorNode'\n    NoiseSourceNode: require './nodes/NoiseSourceNode'\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.coffee\n **/","module.exports =\n  bufferSize: 16384\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/audioConfig.coffee\n **/","module.exports =\n  wrap: (jsNode, nativeNode) ->\n    Object.defineProperty jsNode, 'channelCount',\n      get: ->\n        nativeNode.channelCount\n    Object.defineProperty jsNode, 'channelCountMode',\n      get: ->\n        nativeNode.channelCountMode\n      set: (v) ->\n        nativeNode.channelCountMode = v\n    Object.defineProperty jsNode, 'channelInterpretation',\n      get: ->\n        nativeNode.channelInterpretation\n      set: (v) ->\n        nativeNode.channelInterpretation = v\n    Object.defineProperty jsNode, 'numberOfInputs',\n      get: ->\n        0\n    Object.defineProperty jsNode, 'numberOfOutputs',\n      get: ->\n        nativeNode.numberOfOutputs\n\n    jsNode.connect = nativeNode.connect.bind nativeNode\n    jsNode.disconnect = nativeNode.disconnect.bind nativeNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js-source-utils.coffee\n **/","jsSourceUtils = require '../js-source-utils'\nConstantSourceNode = require './ConstantSourceNode'\naudioConfig = require '../audioConfig'\n\nclass BinauralSourceNode\n  constructor: (@context) ->\n    @constant = new ConstantSourceNode @context, 1.0\n    @audibleFrequencyNode = @context.createGain()\n    @beatFrequencyNode = @context.createGain()\n\n    @half = @context.createGain()\n    @half.gain.value = 0.5\n\n    @inverseHalf = @context.createGain()\n    @inverseHalf.gain.value = -0.5\n\n    @left = @context.createOscillator()\n    @left.frequency.value = 0.0\n    @right = @context.createOscillator()\n    @right.frequency.value = 0.0\n    @merge = @context.createChannelMerger 2\n\n    @constant.connect @audibleFrequencyNode\n    @constant.connect @beatFrequencyNode\n    @beatFrequencyNode.connect @half\n    @beatFrequencyNode.connect @inverseHalf\n\n    @audibleFrequencyNode.connect @left.frequency\n    @audibleFrequencyNode.connect @right.frequency\n    @inverseHalf.connect @left.frequency\n    @half.connect @right.frequency\n\n    @left.connect @merge, 0, 0\n    @right.connect @merge, 0, 1\n\n    jsSourceUtils.wrap this, @merge\n\n    Object.defineProperty this, 'type',\n      get: =>\n        @left.type\n      set: (v) =>\n        @left.type = v\n        @right.type = v\n\n    Object.defineProperty this, 'audibleFrequency',\n      get: =>\n        @audibleFrequencyNode.gain\n\n    Object.defineProperty this, 'beatFrequency',\n      get: =>\n        @beatFrequencyNode.gain\n\n  start: (args...) ->\n    @constant.start args...\n    @left.start args...\n    @right.start args...\n\n  stop: (args...) ->\n    @constant.stop args...\n    @left.stop args...\n    @right.stop args...\n\n  setPeriodicWave: (periodicWave) ->\n    @left.setPeriodicWave periodicWave\n    @right.setPeriodicWave periodicWave\n\nmodule.exports = BinauralSourceNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/nodes/BinauralSourceNode.coffee\n **/","jsSourceUtils = require '../js-source-utils'\naudioConfig = require '../audioConfig'\n\nclass ConstantSourceNode\n  constructor: (@context, value) ->\n    buffer = @context.createBuffer 1, audioConfig.bufferSize,\n      @context.sampleRate\n    data = buffer.getChannelData 0\n\n    if data.fill\n      data.fill 1.0\n    else\n      data[i] = value for i in [0...data.length]\n\n    @node = @context.createBufferSource()\n    @node.buffer = buffer\n    @node.loop = true\n\n    jsSourceUtils.wrap this, @node\n    @start = @node.start.bind @node\n    @stop = @node.stop.bind @node\n\nmodule.exports = ConstantSourceNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/nodes/ConstantSourceNode.coffee\n **/","ConstantSourceNode = require './ConstantSourceNode'\naudioConfig = require '../audioConfig'\n\nProcessor = (sampleRate) ->\n  samples = 0\n  (audioProcessingEvent) ->\n    frequencyValues = audioProcessingEvent.inputBuffer.getChannelData 0\n    phaseValues = audioProcessingEvent.inputBuffer.getChannelData 1\n    leftGainValues = audioProcessingEvent.outputBuffer.getChannelData 0\n    rightGainValues = audioProcessingEvent.outputBuffer.getChannelData 1\n\n    for i in [0...frequencyValues.length]\n      periodInSamples = sampleRate / frequencyValues[i]\n      leftGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin (samples + i) * 2 *\n        Math.PI / periodInSamples - phaseValues[i])\n      rightGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin (samples + i) * 2 *\n        Math.PI / periodInSamples + phaseValues[i])\n    if (Number.isFinite periodInSamples) and not (Number.isNaN periodInSamples)\n      mod = Math.floor periodInSamples\n      samples = (samples + frequencyValues.length) % mod if mod isnt 0\n\nGainModulatorNode = (context) ->\n  result = context.createChannelSplitter 2\n\n  leftGain = context.createGain()\n  leftGain.gain.value = 0.0\n  result.connect leftGain, 0\n  rightGain = context.createGain()\n  rightGain.gain.value = 0.0\n  result.connect rightGain, 1\n\n  constant = new ConstantSourceNode context, 1.0\n  phaseNode = context.createGain()\n  constant.connect phaseNode\n  result.phase = phaseNode.gain\n\n  frequencyNode = context.createGain()\n  constant.connect frequencyNode\n  result.frequency = frequencyNode.gain\n\n  scriptInputMerge = context.createChannelMerger 2\n  frequencyNode.connect scriptInputMerge, 0, 0\n  phaseNode.connect scriptInputMerge, 0, 1\n\n  script = context.createScriptProcessor audioConfig.bufferSize, 2, 2\n  script.onaudioprocess = new Processor context.sampleRate\n  scriptInputMerge.connect script\n\n  scriptOutputSplit = context.createChannelSplitter 2\n  script.connect scriptOutputSplit\n\n  scriptOutputSplit.connect leftGain.gain, 0\n  scriptOutputSplit.connect rightGain.gain, 1\n\n  outputMerge = context.createChannelMerger 2\n  leftGain.connect outputMerge, 0, 0\n  rightGain.connect outputMerge, 0, 1\n\n  # store these to avoid some chrome bugs with garbage collection of live nodes\n  result._gmn = [\n    leftGain,\n    rightGain,\n    constant,\n    phaseNode,\n    frequencyNode,\n    scriptInputMerge,\n    script,\n    scriptOutputSplit,\n    outputMerge\n  ]\n\n  result.connect = outputMerge.connect.bind outputMerge\n\n  constant.start()\n\n  result\n\nmodule.exports = GainModulatorNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/nodes/GainModulatorNode.coffee\n **/","jsSourceUtils = require '../js-source-utils'\naudioConfig = require '../audioConfig'\n\nclass NoiseSourceNode\n  constructor: (@context) ->\n    @node = @context.createScriptProcessor audioConfig.bufferSize, 0, 2\n    @node.onaudioprocess = (audioProcessingEvent) ->\n      for channel in [0..1]\n        data = audioProcessingEvent.outputBuffer.getChannelData channel\n        data[i] = 2 * Math.random() - 1 for i in [0...data.length]\n      # suppress return value generation\n      undefined\n\n    jsSourceUtils.wrap this, @node\n\nmodule.exports = NoiseSourceNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/nodes/NoiseSourceNode.coffee\n **/","NoiseSourceNode = require '../nodes/NoiseSourceNode'\nBinauralSourceNode = require '../nodes/BinauralSourceNode'\nGainModulatorNode = require '../nodes/GainModulatorNode'\n\nclass SelfHypnosis2\n  constructor: (@context) ->\n    @time = 0\n    @startClock = 0\n    @volume = 0.125\n\n    @gain = @context.createGain()\n    @gain.gain.value = @volume\n\n    @binaural = new BinauralSourceNode @context\n    @binaural.audibleFrequency.value = 440\n    @gainModulator = new GainModulatorNode @context\n    @gainModulator.phase.value = 0.0\n    @phaseWobble = @context.createOscillator()\n    @phaseWobble.frequency.value = 8.0 / (15.0 * 60.0)\n    @phaseWobbleGain = @context.createGain()\n    @phaseWobbleGain.gain.value = Math.PI\n\n    @noise = new NoiseSourceNode @context\n    @noiseGainModulator = new GainModulatorNode @context\n    @noiseGainModulator.phase.value = Math.PI / 6\n    @noiseGain = @context.createGain()\n    @noiseGain.gain.value = 0.5\n\n    @binaural2 = new BinauralSourceNode @context\n    @binaural2.audibleFrequency.value = 100\n    @binaural2.beatFrequency.value = 7\n    @binaural2Gain = @context.createGain()\n    @binaural2Gain.gain.value = 0.8\n\n    @binaural3 = new BinauralSourceNode @context\n    @binaural3.audibleFrequency.value = 800\n    @binaural3.beatFrequency.value = 13\n    @binaural3GainModulator = new GainModulatorNode @context\n    @binaural3GainModulator.frequency.value = 1.0\n    @binaural3GainModulator.phase.value = Math.PI\n    @binaural3Gain = @context.createGain()\n    @binaural3Gain.gain.value = 0.8\n\n    @binaural4 = new BinauralSourceNode @context\n    @binaural4.audibleFrequency.value = 440\n    @binaural4.beatFrequency.value = 10\n    @binaural4Gain = @context.createGain()\n    @binaural4Gain.gain.value = 0.25\n\n  play: ->\n    @startClock = @context.currentTime\n    startTime = @startClock - @time\n\n    @binaural.beatFrequency.cancelScheduledValues startTime\n    @binaural.beatFrequency.setValueAtTime 12, startTime\n    @binaural.beatFrequency.linearRampToValueAtTime 8, startTime + 15 * 60\n\n    @gainModulator.frequency.cancelScheduledValues startTime\n    @gainModulator.frequency.setValueAtTime 5, startTime\n    @gainModulator.frequency.linearRampToValueAtTime 2.5, startTime + 15 * 60\n\n    @noiseGainModulator.frequency.cancelScheduledValues startTime\n    @noiseGainModulator.frequency.setValueAtTime 1, startTime\n    @noiseGainModulator.frequency.linearRampToValueAtTime 2.0 / 3.0,\n      startTime + 15 * 60\n\n    @gain.connect @context.destination\n    @gainModulator.connect @gain\n    @phaseWobbleGain.connect @gainModulator.phase\n    @phaseWobble.connect @phaseWobbleGain\n    @binaural.connect @gainModulator\n\n    @noiseGain.connect @gain\n    @noiseGainModulator.connect @noiseGain\n    @noise.connect @noiseGainModulator\n\n    @binaural2Gain.connect @gain\n    @binaural2.connect @binaural2Gain\n\n    @binaural3Gain.connect @gain\n    @binaural3GainModulator.connect @binaural3Gain\n    @binaural3.connect @binaural3GainModulator\n\n    @binaural4Gain.connect @gain\n    @binaural4.connect @binaural4Gain\n\n    @binaural.start()\n    @phaseWobble.start()\n    @binaural2.start()\n    @binaural3.start()\n    @binaural4.start()\n\n  stop: ->\n    @time = @context.currentTime - @startClock\n\n    @binaural.stop()\n    @phaseWobble.stop()\n    @binaural2.stop()\n    @binaural3.stop()\n    @binaural4.stop()\n\n    @gain.disconnect @context.destination\n    @gainModulator.disconnect @gain\n    @phaseWobbleGain.disconnect @gainModulator.phase\n    @phaseWobble.disconnect @phaseWobbleGain\n    @binaural.disconnect @gainModulator\n\n    @noiseGain.disconnect @gain\n    @noiseGainModulator.disconnect @noiseGain\n    @noise.disconnect @noiseGainModulator\n\n    @binaural2Gain.disconnect @gain\n    @binaural2.disconnect @binaural2Gain\n\n    @binaural3Gain.disconnect @gain\n    @binaural3GainModulator.disconnect @binaural3Gain\n    @binaural3.disconnect @binaural3GainModulator\n\n    @binaural4Gain.disconnect @gain\n    @binaural4.disconnect @binaural4Gain\n\nmodule.exports = SelfHypnosis2\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/presets/SelfHypnosis2.coffee\n **/"],"sourceRoot":""}