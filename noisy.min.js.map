{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///noisy.min.js","webpack:///webpack/bootstrap 02d4476dfd485948d244","webpack:///./src/index.coffee","webpack:///./src/audioConfig.coffee","webpack:///./src/js-source-utils.coffee","webpack:///./src/nodes/BinauralSourceNode.coffee","webpack:///./src/nodes/ConstantSourceNode.coffee","webpack:///./src/nodes/GainModulatorNode.coffee","webpack:///./src/nodes/NoiseSourceNode.coffee","webpack:///./src/presets/SelfHypnosis2.coffee"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","presets","SelfHypnosis2","nodes","BinauralSourceNode","GainModulatorNode","NoiseSourceNode","bufferSize","wrap","jsNode","nativeNode","Object","defineProperty","get","channelCount","channelCountMode","set","v","channelInterpretation","numberOfOutputs","connect","bind","disconnect","ConstantSourceNode","audioConfig","jsSourceUtils","process","__slice","slice","audioProcessingEvent","audibleFrequencyValues","beatFrequencyValues","beatHalf","i","leftFrequencyValues","rightFrequencyValues","_i","_ref","inputBuffer","getChannelData","outputBuffer","length","context","constant","audibleFrequencyNode","createGain","beatFrequencyNode","inputMerge","createChannelMerger","script","createScriptProcessor","onaudioprocess","split","createChannelSplitter","left","createOscillator","frequency","value","right","merge","_this","type","gain","prototype","start","args","_ref1","_ref2","arguments","apply","stop","setPeriodicWave","periodicWave","buffer","data","createBuffer","sampleRate","fill","node","createBufferSource","loop","Processor","samples","frequencyValues","leftGainValues","mod","periodInSamples","phaseValues","rightGainValues","Math","sin","PI","Number","isFinite","isNaN","floor","frequencyNode","leftGain","outputMerge","phaseNode","result","rightGain","scriptInputMerge","scriptOutputSplit","phase","_gmn","channel","_j","random","time","plannedTime","startClock","volume","binaural","audibleFrequency","gainModulator","phaseWobble","phaseWobbleGain","noise","noiseGainModulator","noiseGain","binaural2","beatFrequency","binaural2Gain","binaural3","binaural3GainModulator","binaural3Gain","binaural4","binaural4Gain","play","startTime","currentTime","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","destination"],"mappings":"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","file":"noisy.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"noisy\"] = factory();\n\telse\n\t\troot[\"noisy\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"noisy\"] = factory();\n\telse\n\t\troot[\"noisy\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  presets: {\n\t    SelfHypnosis2: __webpack_require__(7)\n\t  },\n\t  nodes: {\n\t    BinauralSourceNode: __webpack_require__(3),\n\t    GainModulatorNode: __webpack_require__(5),\n\t    NoiseSourceNode: __webpack_require__(6)\n\t  }\n\t};\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  bufferSize: 16384\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  wrap: function(jsNode, nativeNode) {\n\t    Object.defineProperty(jsNode, 'channelCount', {\n\t      get: function() {\n\t        return nativeNode.channelCount;\n\t      }\n\t    });\n\t    Object.defineProperty(jsNode, 'channelCountMode', {\n\t      get: function() {\n\t        return nativeNode.channelCountMode;\n\t      },\n\t      set: function(v) {\n\t        return nativeNode.channelCountMode = v;\n\t      }\n\t    });\n\t    Object.defineProperty(jsNode, 'channelInterpretation', {\n\t      get: function() {\n\t        return nativeNode.channelInterpretation;\n\t      },\n\t      set: function(v) {\n\t        return nativeNode.channelInterpretation = v;\n\t      }\n\t    });\n\t    Object.defineProperty(jsNode, 'numberOfInputs', {\n\t      get: function() {\n\t        return 0;\n\t      }\n\t    });\n\t    Object.defineProperty(jsNode, 'numberOfOutputs', {\n\t      get: function() {\n\t        return nativeNode.numberOfOutputs;\n\t      }\n\t    });\n\t    jsNode.connect = nativeNode.connect.bind(nativeNode);\n\t    return jsNode.disconnect = nativeNode.disconnect.bind(nativeNode);\n\t  }\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BinauralSourceNode, ConstantSourceNode, audioConfig, jsSourceUtils, process,\n\t  __slice = [].slice;\n\t\n\tjsSourceUtils = __webpack_require__(2);\n\t\n\tConstantSourceNode = __webpack_require__(4);\n\t\n\taudioConfig = __webpack_require__(1);\n\t\n\tprocess = function(audioProcessingEvent) {\n\t  var audibleFrequencyValues, beatFrequencyValues, beatHalf, i, leftFrequencyValues, rightFrequencyValues, _i, _ref;\n\t  audibleFrequencyValues = audioProcessingEvent.inputBuffer.getChannelData(0);\n\t  beatFrequencyValues = audioProcessingEvent.inputBuffer.getChannelData(1);\n\t  leftFrequencyValues = audioProcessingEvent.outputBuffer.getChannelData(0);\n\t  rightFrequencyValues = audioProcessingEvent.outputBuffer.getChannelData(1);\n\t  for (i = _i = 0, _ref = audibleFrequencyValues.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\n\t    beatHalf = 0.5 * beatFrequencyValues[i];\n\t    leftFrequencyValues[i] = audibleFrequencyValues[i] - beatHalf;\n\t    rightFrequencyValues[i] = audibleFrequencyValues[i] + beatHalf;\n\t  }\n\t  return void 0;\n\t};\n\t\n\tBinauralSourceNode = (function() {\n\t  function BinauralSourceNode(context) {\n\t    this.context = context;\n\t    this.constant = new ConstantSourceNode(this.context, 1.0);\n\t    this.audibleFrequencyNode = this.context.createGain();\n\t    this.beatFrequencyNode = this.context.createGain();\n\t    this.inputMerge = this.context.createChannelMerger(2);\n\t    this.script = this.context.createScriptProcessor(audioConfig.bufferSize, 2, 2);\n\t    this.script.onaudioprocess = process;\n\t    this.split = this.context.createChannelSplitter(2);\n\t    this.left = this.context.createOscillator();\n\t    this.left.frequency.value = 0.0;\n\t    this.right = this.context.createOscillator();\n\t    this.right.frequency.value = 0.0;\n\t    this.merge = this.context.createChannelMerger(2);\n\t    this.constant.connect(this.audibleFrequencyNode);\n\t    this.constant.connect(this.beatFrequencyNode);\n\t    this.audibleFrequencyNode.connect(this.inputMerge, 0, 0);\n\t    this.beatFrequencyNode.connect(this.inputMerge, 0, 1);\n\t    this.inputMerge.connect(this.script);\n\t    this.script.connect(this.split);\n\t    this.split.connect(this.left.frequency, 0);\n\t    this.split.connect(this.right.frequency, 1);\n\t    this.left.connect(this.merge, 0, 0);\n\t    this.right.connect(this.merge, 0, 1);\n\t    jsSourceUtils.wrap(this, this.merge);\n\t    Object.defineProperty(this, 'type', {\n\t      get: (function(_this) {\n\t        return function() {\n\t          return _this.left.type;\n\t        };\n\t      })(this),\n\t      set: (function(_this) {\n\t        return function(v) {\n\t          _this.left.type = v;\n\t          return _this.right.type = v;\n\t        };\n\t      })(this)\n\t    });\n\t    Object.defineProperty(this, 'audibleFrequency', {\n\t      get: (function(_this) {\n\t        return function() {\n\t          return _this.audibleFrequencyNode.gain;\n\t        };\n\t      })(this)\n\t    });\n\t    Object.defineProperty(this, 'beatFrequency', {\n\t      get: (function(_this) {\n\t        return function() {\n\t          return _this.beatFrequencyNode.gain;\n\t        };\n\t      })(this)\n\t    });\n\t  }\n\t\n\t  BinauralSourceNode.prototype.start = function() {\n\t    var args, _ref, _ref1, _ref2;\n\t    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\t    (_ref = this.constant).start.apply(_ref, args);\n\t    (_ref1 = this.left).start.apply(_ref1, args);\n\t    return (_ref2 = this.right).start.apply(_ref2, args);\n\t  };\n\t\n\t  BinauralSourceNode.prototype.stop = function() {\n\t    var args, _ref, _ref1, _ref2;\n\t    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\t    (_ref = this.constant).stop.apply(_ref, args);\n\t    (_ref1 = this.left).stop.apply(_ref1, args);\n\t    return (_ref2 = this.right).stop.apply(_ref2, args);\n\t  };\n\t\n\t  BinauralSourceNode.prototype.setPeriodicWave = function(periodicWave) {\n\t    this.left.setPeriodicWave(periodicWave);\n\t    return this.right.setPeriodicWave(periodicWave);\n\t  };\n\t\n\t  return BinauralSourceNode;\n\t\n\t})();\n\t\n\tmodule.exports = BinauralSourceNode;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar ConstantSourceNode, audioConfig, jsSourceUtils;\n\t\n\tjsSourceUtils = __webpack_require__(2);\n\t\n\taudioConfig = __webpack_require__(1);\n\t\n\tConstantSourceNode = (function() {\n\t  function ConstantSourceNode(context, value) {\n\t    var buffer, data, i, _i, _ref;\n\t    this.context = context;\n\t    buffer = this.context.createBuffer(1, audioConfig.bufferSize, this.context.sampleRate);\n\t    data = buffer.getChannelData(0);\n\t    if (data.fill) {\n\t      data.fill(1.0);\n\t    } else {\n\t      for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n\t        data[i] = value;\n\t      }\n\t    }\n\t    this.node = this.context.createBufferSource();\n\t    this.node.buffer = buffer;\n\t    this.node.loop = true;\n\t    jsSourceUtils.wrap(this, this.node);\n\t    this.start = this.node.start.bind(this.node);\n\t    this.stop = this.node.stop.bind(this.node);\n\t  }\n\t\n\t  return ConstantSourceNode;\n\t\n\t})();\n\t\n\tmodule.exports = ConstantSourceNode;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar ConstantSourceNode, GainModulatorNode, Processor, audioConfig;\n\t\n\tConstantSourceNode = __webpack_require__(4);\n\t\n\taudioConfig = __webpack_require__(1);\n\t\n\tProcessor = function(sampleRate) {\n\t  var samples;\n\t  samples = 0;\n\t  return function(audioProcessingEvent) {\n\t    var frequencyValues, i, leftGainValues, mod, periodInSamples, phaseValues, rightGainValues, _i, _ref;\n\t    frequencyValues = audioProcessingEvent.inputBuffer.getChannelData(0);\n\t    phaseValues = audioProcessingEvent.inputBuffer.getChannelData(1);\n\t    leftGainValues = audioProcessingEvent.outputBuffer.getChannelData(0);\n\t    rightGainValues = audioProcessingEvent.outputBuffer.getChannelData(1);\n\t    for (i = _i = 0, _ref = frequencyValues.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n\t      periodInSamples = sampleRate / frequencyValues[i];\n\t      leftGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin((samples + i) * 2 * Math.PI / periodInSamples - phaseValues[i]));\n\t      rightGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin((samples + i) * 2 * Math.PI / periodInSamples + phaseValues[i]));\n\t    }\n\t    if ((Number.isFinite(periodInSamples)) && !(Number.isNaN(periodInSamples))) {\n\t      mod = Math.floor(periodInSamples);\n\t      if (mod !== 0) {\n\t        return samples = (samples + frequencyValues.length) % mod;\n\t      }\n\t    }\n\t  };\n\t};\n\t\n\tGainModulatorNode = function(context) {\n\t  var constant, frequencyNode, leftGain, outputMerge, phaseNode, result, rightGain, script, scriptInputMerge, scriptOutputSplit;\n\t  result = context.createChannelSplitter(2);\n\t  leftGain = context.createGain();\n\t  leftGain.gain.value = 0.0;\n\t  result.connect(leftGain, 0);\n\t  rightGain = context.createGain();\n\t  rightGain.gain.value = 0.0;\n\t  result.connect(rightGain, 1);\n\t  constant = new ConstantSourceNode(context, 1.0);\n\t  phaseNode = context.createGain();\n\t  constant.connect(phaseNode);\n\t  result.phase = phaseNode.gain;\n\t  frequencyNode = context.createGain();\n\t  constant.connect(frequencyNode);\n\t  result.frequency = frequencyNode.gain;\n\t  scriptInputMerge = context.createChannelMerger(2);\n\t  frequencyNode.connect(scriptInputMerge, 0, 0);\n\t  phaseNode.connect(scriptInputMerge, 0, 1);\n\t  script = context.createScriptProcessor(audioConfig.bufferSize, 2, 2);\n\t  script.onaudioprocess = new Processor(context.sampleRate);\n\t  scriptInputMerge.connect(script);\n\t  scriptOutputSplit = context.createChannelSplitter(2);\n\t  script.connect(scriptOutputSplit);\n\t  scriptOutputSplit.connect(leftGain.gain, 0);\n\t  scriptOutputSplit.connect(rightGain.gain, 1);\n\t  outputMerge = context.createChannelMerger(2);\n\t  leftGain.connect(outputMerge, 0, 0);\n\t  rightGain.connect(outputMerge, 0, 1);\n\t  result._gmn = [leftGain, rightGain, constant, phaseNode, frequencyNode, scriptInputMerge, script, scriptOutputSplit, outputMerge];\n\t  result.connect = outputMerge.connect.bind(outputMerge);\n\t  constant.start();\n\t  return result;\n\t};\n\t\n\tmodule.exports = GainModulatorNode;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar NoiseSourceNode, audioConfig, jsSourceUtils;\n\t\n\tjsSourceUtils = __webpack_require__(2);\n\t\n\taudioConfig = __webpack_require__(1);\n\t\n\tNoiseSourceNode = (function() {\n\t  function NoiseSourceNode(context) {\n\t    this.context = context;\n\t    this.node = this.context.createScriptProcessor(audioConfig.bufferSize, 0, 2);\n\t    this.node.onaudioprocess = function(audioProcessingEvent) {\n\t      var channel, data, i, _i, _j, _ref;\n\t      for (channel = _i = 0; _i <= 1; channel = ++_i) {\n\t        data = audioProcessingEvent.outputBuffer.getChannelData(channel);\n\t        for (i = _j = 0, _ref = data.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {\n\t          data[i] = 2 * Math.random() - 1;\n\t        }\n\t      }\n\t      return void 0;\n\t    };\n\t    jsSourceUtils.wrap(this, this.node);\n\t  }\n\t\n\t  return NoiseSourceNode;\n\t\n\t})();\n\t\n\tmodule.exports = NoiseSourceNode;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BinauralSourceNode, GainModulatorNode, NoiseSourceNode, SelfHypnosis2;\n\t\n\tNoiseSourceNode = __webpack_require__(6);\n\t\n\tBinauralSourceNode = __webpack_require__(3);\n\t\n\tGainModulatorNode = __webpack_require__(5);\n\t\n\tSelfHypnosis2 = (function() {\n\t  function SelfHypnosis2(context) {\n\t    this.context = context;\n\t    this.time = 0;\n\t    this.plannedTime = 0;\n\t    this.startClock = 0;\n\t    this.volume = 0.125;\n\t    this.gain = this.context.createGain();\n\t    this.gain.gain.value = this.volume;\n\t    this.binaural = new BinauralSourceNode(this.context);\n\t    this.binaural.audibleFrequency.value = 440;\n\t    this.gainModulator = new GainModulatorNode(this.context);\n\t    this.gainModulator.phase.value = 0.0;\n\t    this.phaseWobble = this.context.createOscillator();\n\t    this.phaseWobble.frequency.value = 8.0 / (15.0 * 60.0);\n\t    this.phaseWobbleGain = this.context.createGain();\n\t    this.phaseWobbleGain.gain.value = Math.PI;\n\t    this.noise = new NoiseSourceNode(this.context);\n\t    this.noiseGainModulator = new GainModulatorNode(this.context);\n\t    this.noiseGainModulator.phase.value = Math.PI / 6;\n\t    this.noiseGain = this.context.createGain();\n\t    this.noiseGain.gain.value = 0.5;\n\t    this.binaural2 = new BinauralSourceNode(this.context);\n\t    this.binaural2.audibleFrequency.value = 100;\n\t    this.binaural2.beatFrequency.value = 7;\n\t    this.binaural2Gain = this.context.createGain();\n\t    this.binaural2Gain.gain.value = 0.8;\n\t    this.binaural3 = new BinauralSourceNode(this.context);\n\t    this.binaural3.audibleFrequency.value = 800;\n\t    this.binaural3.beatFrequency.value = 13;\n\t    this.binaural3GainModulator = new GainModulatorNode(this.context);\n\t    this.binaural3GainModulator.frequency.value = 1.0;\n\t    this.binaural3GainModulator.phase.value = Math.PI;\n\t    this.binaural3Gain = this.context.createGain();\n\t    this.binaural3Gain.gain.value = 0.8;\n\t    this.binaural4 = new BinauralSourceNode(this.context);\n\t    this.binaural4.audibleFrequency.value = 440;\n\t    this.binaural4.beatFrequency.value = 10;\n\t    this.binaural4Gain = this.context.createGain();\n\t    this.binaural4Gain.gain.value = 0.25;\n\t  }\n\t\n\t  SelfHypnosis2.prototype.play = function() {\n\t    var startTime;\n\t    this.startClock = this.context.currentTime;\n\t    startTime = this.startClock - this.time;\n\t    this.binaural.beatFrequency.cancelScheduledValues(startTime);\n\t    this.binaural.beatFrequency.setValueAtTime(12, startTime);\n\t    this.binaural.beatFrequency.linearRampToValueAtTime(8, startTime + 15 * 60);\n\t    this.gainModulator.frequency.cancelScheduledValues(startTime);\n\t    this.gainModulator.frequency.setValueAtTime(5, startTime);\n\t    this.gainModulator.frequency.linearRampToValueAtTime(2.5, startTime + 15 * 60);\n\t    this.noiseGainModulator.frequency.cancelScheduledValues(startTime);\n\t    this.noiseGainModulator.frequency.setValueAtTime(1, startTime);\n\t    this.noiseGainModulator.frequency.linearRampToValueAtTime(2.0 / 3.0, startTime + 15 * 60);\n\t    this.gain.connect(this.context.destination);\n\t    this.gainModulator.connect(this.gain);\n\t    this.phaseWobbleGain.connect(this.gainModulator.phase);\n\t    this.phaseWobble.connect(this.phaseWobbleGain);\n\t    this.binaural.connect(this.gainModulator);\n\t    this.noiseGain.connect(this.gain);\n\t    this.noiseGainModulator.connect(this.noiseGain);\n\t    this.noise.connect(this.noiseGainModulator);\n\t    this.binaural2Gain.connect(this.gain);\n\t    this.binaural2.connect(this.binaural2Gain);\n\t    this.binaural3Gain.connect(this.gain);\n\t    this.binaural3GainModulator.connect(this.binaural3Gain);\n\t    this.binaural3.connect(this.binaural3GainModulator);\n\t    this.binaural4Gain.connect(this.gain);\n\t    this.binaural4.connect(this.binaural4Gain);\n\t    this.binaural.start();\n\t    this.phaseWobble.start();\n\t    this.binaural2.start();\n\t    this.binaural3.start();\n\t    return this.binaural4.start();\n\t  };\n\t\n\t  SelfHypnosis2.prototype.stop = function() {\n\t    this.time = this.context.currentTime - this.startClock;\n\t    this.binaural.stop();\n\t    this.phaseWobble.stop();\n\t    this.binaural2.stop();\n\t    this.binaural3.stop();\n\t    this.binaural4.stop();\n\t    this.gain.disconnect(this.context.destination);\n\t    this.gainModulator.disconnect(this.gain);\n\t    this.phaseWobbleGain.disconnect(this.gainModulator.phase);\n\t    this.phaseWobble.disconnect(this.phaseWobbleGain);\n\t    this.binaural.disconnect(this.gainModulator);\n\t    this.noiseGain.disconnect(this.gain);\n\t    this.noiseGainModulator.disconnect(this.noiseGain);\n\t    this.noise.disconnect(this.noiseGainModulator);\n\t    this.binaural2Gain.disconnect(this.gain);\n\t    this.binaural2.disconnect(this.binaural2Gain);\n\t    this.binaural3Gain.disconnect(this.gain);\n\t    this.binaural3GainModulator.disconnect(this.binaural3Gain);\n\t    this.binaural3.disconnect(this.binaural3GainModulator);\n\t    this.binaural4Gain.disconnect(this.gain);\n\t    return this.binaural4.disconnect(this.binaural4Gain);\n\t  };\n\t\n\t  return SelfHypnosis2;\n\t\n\t})();\n\t\n\tmodule.exports = SelfHypnosis2;\n\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** noisy.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 02d4476dfd485948d244\n **/","module.exports =\n  presets:\n    SelfHypnosis2: require './presets/SelfHypnosis2'\n  nodes:\n    BinauralSourceNode: require './nodes/BinauralSourceNode'\n    GainModulatorNode: require './nodes/GainModulatorNode'\n    NoiseSourceNode: require './nodes/NoiseSourceNode'\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.coffee\n **/","module.exports =\n  bufferSize: 16384\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/audioConfig.coffee\n **/","module.exports =\n  wrap: (jsNode, nativeNode) ->\n    Object.defineProperty jsNode, 'channelCount',\n      get: ->\n        nativeNode.channelCount\n    Object.defineProperty jsNode, 'channelCountMode',\n      get: ->\n        nativeNode.channelCountMode\n      set: (v) ->\n        nativeNode.channelCountMode = v\n    Object.defineProperty jsNode, 'channelInterpretation',\n      get: ->\n        nativeNode.channelInterpretation\n      set: (v) ->\n        nativeNode.channelInterpretation = v\n    Object.defineProperty jsNode, 'numberOfInputs',\n      get: ->\n        0\n    Object.defineProperty jsNode, 'numberOfOutputs',\n      get: ->\n        nativeNode.numberOfOutputs\n\n    jsNode.connect = nativeNode.connect.bind nativeNode\n    jsNode.disconnect = nativeNode.disconnect.bind nativeNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js-source-utils.coffee\n **/","jsSourceUtils = require '../js-source-utils'\nConstantSourceNode = require './ConstantSourceNode'\naudioConfig = require '../audioConfig'\n\nprocess = (audioProcessingEvent) ->\n  audibleFrequencyValues = audioProcessingEvent.inputBuffer.getChannelData 0\n  beatFrequencyValues = audioProcessingEvent.inputBuffer.getChannelData 1\n  leftFrequencyValues = audioProcessingEvent.outputBuffer.getChannelData 0\n  rightFrequencyValues = audioProcessingEvent.outputBuffer.getChannelData 1\n\n  for i in [0..audibleFrequencyValues.length]\n    beatHalf = 0.5 * beatFrequencyValues[i]\n    leftFrequencyValues[i] = audibleFrequencyValues[i] - beatHalf\n    rightFrequencyValues[i] = audibleFrequencyValues[i] + beatHalf\n  # supress useless return value array generation\n  undefined\n\nclass BinauralSourceNode\n  constructor: (@context) ->\n    @constant = new ConstantSourceNode @context, 1.0\n    @audibleFrequencyNode = @context.createGain()\n    @beatFrequencyNode = @context.createGain()\n    @inputMerge = @context.createChannelMerger 2\n\n    @script = @context.createScriptProcessor audioConfig.bufferSize, 2, 2\n    @script.onaudioprocess = process\n\n    @split = @context.createChannelSplitter 2\n    @left = @context.createOscillator()\n    @left.frequency.value = 0.0\n    @right = @context.createOscillator()\n    @right.frequency.value = 0.0\n    @merge = @context.createChannelMerger 2\n\n    @constant.connect @audibleFrequencyNode\n    @constant.connect @beatFrequencyNode\n    @audibleFrequencyNode.connect @inputMerge, 0, 0\n    @beatFrequencyNode.connect @inputMerge, 0, 1\n    @inputMerge.connect @script\n\n    @script.connect @split\n\n    @split.connect @left.frequency, 0\n    @split.connect @right.frequency, 1\n    @left.connect @merge, 0, 0\n    @right.connect @merge, 0, 1\n\n    jsSourceUtils.wrap this, @merge\n\n    Object.defineProperty this, 'type',\n      get: =>\n        @left.type\n      set: (v) =>\n        @left.type = v\n        @right.type = v\n\n    Object.defineProperty this, 'audibleFrequency',\n      get: =>\n        @audibleFrequencyNode.gain\n\n    Object.defineProperty this, 'beatFrequency',\n      get: =>\n        @beatFrequencyNode.gain\n\n  start: (args...) ->\n    @constant.start args...\n    @left.start args...\n    @right.start args...\n\n  stop: (args...) ->\n    @constant.stop args...\n    @left.stop args...\n    @right.stop args...\n\n  setPeriodicWave: (periodicWave) ->\n    @left.setPeriodicWave periodicWave\n    @right.setPeriodicWave periodicWave\n\nmodule.exports = BinauralSourceNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/nodes/BinauralSourceNode.coffee\n **/","jsSourceUtils = require '../js-source-utils'\naudioConfig = require '../audioConfig'\n\nclass ConstantSourceNode\n  constructor: (@context, value) ->\n    buffer = @context.createBuffer 1, audioConfig.bufferSize,\n      @context.sampleRate\n    data = buffer.getChannelData 0\n\n    if data.fill\n      data.fill 1.0\n    else\n      data[i] = value for i in [0...data.length]\n\n    @node = @context.createBufferSource()\n    @node.buffer = buffer\n    @node.loop = true\n\n    jsSourceUtils.wrap this, @node\n    @start = @node.start.bind @node\n    @stop = @node.stop.bind @node\n\nmodule.exports = ConstantSourceNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/nodes/ConstantSourceNode.coffee\n **/","ConstantSourceNode = require './ConstantSourceNode'\naudioConfig = require '../audioConfig'\n\nProcessor = (sampleRate) ->\n  samples = 0\n  (audioProcessingEvent) ->\n    frequencyValues = audioProcessingEvent.inputBuffer.getChannelData 0\n    phaseValues = audioProcessingEvent.inputBuffer.getChannelData 1\n    leftGainValues = audioProcessingEvent.outputBuffer.getChannelData 0\n    rightGainValues = audioProcessingEvent.outputBuffer.getChannelData 1\n\n    for i in [0...frequencyValues.length]\n      periodInSamples = sampleRate / frequencyValues[i]\n      leftGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin (samples + i) * 2 *\n        Math.PI / periodInSamples - phaseValues[i])\n      rightGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin (samples + i) * 2 *\n        Math.PI / periodInSamples + phaseValues[i])\n    if (Number.isFinite periodInSamples) and not (Number.isNaN periodInSamples)\n      mod = Math.floor periodInSamples\n      samples = (samples + frequencyValues.length) % mod if mod isnt 0\n\nGainModulatorNode = (context) ->\n  result = context.createChannelSplitter 2\n\n  leftGain = context.createGain()\n  leftGain.gain.value = 0.0\n  result.connect leftGain, 0\n  rightGain = context.createGain()\n  rightGain.gain.value = 0.0\n  result.connect rightGain, 1\n\n  constant = new ConstantSourceNode context, 1.0\n  phaseNode = context.createGain()\n  constant.connect phaseNode\n  result.phase = phaseNode.gain\n\n  frequencyNode = context.createGain()\n  constant.connect frequencyNode\n  result.frequency = frequencyNode.gain\n\n  scriptInputMerge = context.createChannelMerger 2\n  frequencyNode.connect scriptInputMerge, 0, 0\n  phaseNode.connect scriptInputMerge, 0, 1\n\n  script = context.createScriptProcessor audioConfig.bufferSize, 2, 2\n  script.onaudioprocess = new Processor context.sampleRate\n  scriptInputMerge.connect script\n\n  scriptOutputSplit = context.createChannelSplitter 2\n  script.connect scriptOutputSplit\n\n  scriptOutputSplit.connect leftGain.gain, 0\n  scriptOutputSplit.connect rightGain.gain, 1\n\n  outputMerge = context.createChannelMerger 2\n  leftGain.connect outputMerge, 0, 0\n  rightGain.connect outputMerge, 0, 1\n\n  # store these to avoid some chrome bugs with garbage collection of live nodes\n  result._gmn = [\n    leftGain,\n    rightGain,\n    constant,\n    phaseNode,\n    frequencyNode,\n    scriptInputMerge,\n    script,\n    scriptOutputSplit,\n    outputMerge\n  ]\n\n  result.connect = outputMerge.connect.bind outputMerge\n\n  constant.start()\n\n  result\n\nmodule.exports = GainModulatorNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/nodes/GainModulatorNode.coffee\n **/","jsSourceUtils = require '../js-source-utils'\naudioConfig = require '../audioConfig'\n\nclass NoiseSourceNode\n  constructor: (@context) ->\n    @node = @context.createScriptProcessor audioConfig.bufferSize, 0, 2\n    @node.onaudioprocess = (audioProcessingEvent) ->\n      for channel in [0..1]\n        data = audioProcessingEvent.outputBuffer.getChannelData channel\n        data[i] = 2 * Math.random() - 1 for i in [0...data.length]\n      # suppress return value generation\n      undefined\n\n    jsSourceUtils.wrap this, @node\n\nmodule.exports = NoiseSourceNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/nodes/NoiseSourceNode.coffee\n **/","NoiseSourceNode = require '../nodes/NoiseSourceNode'\nBinauralSourceNode = require '../nodes/BinauralSourceNode'\nGainModulatorNode = require '../nodes/GainModulatorNode'\n\nclass SelfHypnosis2\n  constructor: (@context) ->\n    @time = 0\n    @plannedTime = 0\n    @startClock = 0\n    @volume = 0.125\n\n    @gain = @context.createGain()\n    @gain.gain.value = @volume\n\n    @binaural = new BinauralSourceNode @context\n    @binaural.audibleFrequency.value = 440\n    @gainModulator = new GainModulatorNode @context\n    @gainModulator.phase.value = 0.0\n    @phaseWobble = @context.createOscillator()\n    @phaseWobble.frequency.value = 8.0 / (15.0 * 60.0)\n    @phaseWobbleGain = @context.createGain()\n    @phaseWobbleGain.gain.value = Math.PI\n\n    @noise = new NoiseSourceNode @context\n    @noiseGainModulator = new GainModulatorNode @context\n    @noiseGainModulator.phase.value = Math.PI / 6\n    @noiseGain = @context.createGain()\n    @noiseGain.gain.value = 0.5\n\n    @binaural2 = new BinauralSourceNode @context\n    @binaural2.audibleFrequency.value = 100\n    @binaural2.beatFrequency.value = 7\n    @binaural2Gain = @context.createGain()\n    @binaural2Gain.gain.value = 0.8\n\n    @binaural3 = new BinauralSourceNode @context\n    @binaural3.audibleFrequency.value = 800\n    @binaural3.beatFrequency.value = 13\n    @binaural3GainModulator = new GainModulatorNode @context\n    @binaural3GainModulator.frequency.value = 1.0\n    @binaural3GainModulator.phase.value = Math.PI\n    @binaural3Gain = @context.createGain()\n    @binaural3Gain.gain.value = 0.8\n\n    @binaural4 = new BinauralSourceNode @context\n    @binaural4.audibleFrequency.value = 440\n    @binaural4.beatFrequency.value = 10\n    @binaural4Gain = @context.createGain()\n    @binaural4Gain.gain.value = 0.25\n\n  play: ->\n    @startClock = @context.currentTime\n    startTime = @startClock - @time\n\n    @binaural.beatFrequency.cancelScheduledValues startTime\n    @binaural.beatFrequency.setValueAtTime 12, startTime\n    @binaural.beatFrequency.linearRampToValueAtTime 8, startTime + 15 * 60\n\n    @gainModulator.frequency.cancelScheduledValues startTime\n    @gainModulator.frequency.setValueAtTime 5, startTime\n    @gainModulator.frequency.linearRampToValueAtTime 2.5, startTime + 15 * 60\n\n    @noiseGainModulator.frequency.cancelScheduledValues startTime\n    @noiseGainModulator.frequency.setValueAtTime 1, startTime\n    @noiseGainModulator.frequency.linearRampToValueAtTime 2.0 / 3.0,\n      startTime + 15 * 60\n\n    @gain.connect @context.destination\n    @gainModulator.connect @gain\n    @phaseWobbleGain.connect @gainModulator.phase\n    @phaseWobble.connect @phaseWobbleGain\n    @binaural.connect @gainModulator\n\n    @noiseGain.connect @gain\n    @noiseGainModulator.connect @noiseGain\n    @noise.connect @noiseGainModulator\n\n    @binaural2Gain.connect @gain\n    @binaural2.connect @binaural2Gain\n\n    @binaural3Gain.connect @gain\n    @binaural3GainModulator.connect @binaural3Gain\n    @binaural3.connect @binaural3GainModulator\n\n    @binaural4Gain.connect @gain\n    @binaural4.connect @binaural4Gain\n\n    @binaural.start()\n    @phaseWobble.start()\n    @binaural2.start()\n    @binaural3.start()\n    @binaural4.start()\n\n  stop: ->\n    @time = @context.currentTime - @startClock\n\n    @binaural.stop()\n    @phaseWobble.stop()\n    @binaural2.stop()\n    @binaural3.stop()\n    @binaural4.stop()\n\n    @gain.disconnect @context.destination\n    @gainModulator.disconnect @gain\n    @phaseWobbleGain.disconnect @gainModulator.phase\n    @phaseWobble.disconnect @phaseWobbleGain\n    @binaural.disconnect @gainModulator\n\n    @noiseGain.disconnect @gain\n    @noiseGainModulator.disconnect @noiseGain\n    @noise.disconnect @noiseGainModulator\n\n    @binaural2Gain.disconnect @gain\n    @binaural2.disconnect @binaural2Gain\n\n    @binaural3Gain.disconnect @gain\n    @binaural3GainModulator.disconnect @binaural3Gain\n    @binaural3.disconnect @binaural3GainModulator\n\n    @binaural4Gain.disconnect @gain\n    @binaural4.disconnect @binaural4Gain\n\nmodule.exports = SelfHypnosis2\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/presets/SelfHypnosis2.coffee\n **/"],"sourceRoot":""}