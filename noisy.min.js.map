{"version":3,"file":"noisy.min.js","sources":["../src/js-source-utils.js","../src/audioConfig.js","../src/nodes/NoiseSourceNode.js","../src/nodes/BinauralSourceNode.js","../src/nodes/GainModulatorNode.js","../src/presets/SelfHypnosis2.js"],"sourcesContent":["export function wrap(jsNode, nativeNode) {\n  Object.defineProperty(jsNode, 'channelCount', {\n    get: () => nativeNode.channelCount\n  })\n  Object.defineProperty(jsNode, 'channelCountMode', {\n    get: () => nativeNode.channelCountMode,\n    set: (v) => nativeNode.channelCountMode = v\n  })\n  Object.defineProperty(jsNode, 'channelInterpretation', {\n    get: () => nativeNode.channelInterpretation,\n    set: (v) => nativeNode.channelInterpretation = v\n  })\n  Object.defineProperty(jsNode, 'numberOfInputs', {\n    get: () => 0\n  })\n  Object.defineProperty(jsNode, 'numberOfOutputs', {\n    get: () => nativeNode.numberOfOutputs\n  })\n\n  jsNode.connect = nativeNode.connect.bind(nativeNode)\n  jsNode.disconnect = nativeNode.disconnect.bind(nativeNode)\n}\n","export default {bufferSize: 16384}\n","import {wrap} from '../js-source-utils'\nimport audioConfig from '../audioConfig'\n\nexport default class NoiseSourceNode {\n  constructor(context) {\n    this.context = context\n    this.node = context.createScriptProcessor(audioConfig.bufferSize, 0, 2)\n    this.node.onaudioprocess = audioProcessingEvent => {\n      for (let channel = 0; channel < 2; channel++) {\n        const data = audioProcessingEvent.outputBuffer.getChannelData(channel)\n        for (let i = 0; i < data.length; i++) {\n          data[i] = 2 * Math.random() - 1\n        }\n      }\n    }\n\n    wrap(this, this.node)\n  }\n}\n","import {wrap} from '../js-source-utils'\n\nexport default class BinauralSourceNode {\n  constructor(context) {\n    this.context = context\n    this.constant = context.createConstantSource()\n    this.audibleFrequencyNode = context.createGain()\n    this.beatFrequencyNode = context.createGain()\n\n    this.half = context.createGain()\n    this.half.gain.value = 0.5\n\n    this.inverseHalf = context.createGain()\n    this.inverseHalf.gain.value = -0.5\n\n    this.left = context.createOscillator()\n    this.left.frequency.value = 0.0\n    this.right = context.createOscillator()\n    this.right.frequency.value = 0.0\n    this.merge = context.createChannelMerger(2)\n\n    this.constant.connect(this.audibleFrequencyNode)\n    this.constant.connect(this.beatFrequencyNode)\n    this.beatFrequencyNode.connect(this.half)\n    this.beatFrequencyNode.connect(this.inverseHalf)\n\n    this.audibleFrequencyNode.connect(this.left.frequency)\n    this.audibleFrequencyNode.connect(this.right.frequency)\n    this.inverseHalf.connect(this.left.frequency)\n    this.half.connect(this.right.frequency)\n\n    this.left.connect(this.merge, 0, 0)\n    this.right.connect(this.merge, 0, 1)\n\n    wrap(this, this.merge)\n  }\n\n  get type() {\n    return this.left.type\n  }\n\n  set type(v) {\n    this.left.type = v\n    this.right.type = v\n  }\n\n  get audibleFrequency() {\n    return this.audibleFrequencyNode.gain\n  }\n\n  get beatFrequency() {\n    return this.beatFrequencyNode.gain\n  }\n\n  start(...args) {\n    this.constant.start(...args)\n    this.left.start(...args)\n    this.right.start(...args)\n  }\n\n  stop(...args) {\n    this.constant.stop(...args)\n    this.left.stop(...args)\n    this.right.stop(...args)\n  }\n\n  setPeriodicWave(periodicWave) {\n    this.left.setPeriodicWave(periodicWave)\n    this.right.setPeriodicWave(periodicWave)\n  }\n}\n","import audioConfig from '../audioConfig'\n\nfunction createProcessor(sampleRate) {\n  let samples = 0\n  return (audioProcessingEvent) => {\n    const frequencyValues = audioProcessingEvent.inputBuffer.getChannelData(0)\n    const phaseValues = audioProcessingEvent.inputBuffer.getChannelData(1)\n    const leftGainValues = audioProcessingEvent.outputBuffer.getChannelData(0)\n    const rightGainValues = audioProcessingEvent.outputBuffer.getChannelData(1)\n\n    let periodInSamples;\n    for(let i = 0; i < frequencyValues.length; i++) {\n      periodInSamples = sampleRate / frequencyValues[i]\n      leftGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin((samples + i) * 2 * Math.PI / periodInSamples - phaseValues[i]))\n      rightGainValues[i] = -0.5 + 3 / (4 + 2 * Math.sin((samples + i) * 2 * Math.PI / periodInSamples + phaseValues[i]))\n    }\n    if (Number.isFinite(periodInSamples) && !Number.isNaN(periodInSamples)) {\n      const mod = Math.floor(periodInSamples)\n      if (mod != 0) {\n        samples = (samples + frequencyValues.length) % mod\n      }\n    }\n  }\n}\n\nexport default function GainModulatorNode(context) {\n  const result = context.createChannelSplitter(2)\n\n  const leftGain = context.createGain()\n  leftGain.gain.value = 0.0\n  result.connect(leftGain, 0)\n  const rightGain = context.createGain()\n  rightGain.gain.value = 0.0\n  result.connect(rightGain, 1)\n\n  const constant = context.createConstantSource()\n  const phaseNode = context.createGain()\n  constant.connect(phaseNode)\n  result.phase = phaseNode.gain\n\n  const frequencyNode = context.createGain()\n  constant.connect(frequencyNode)\n  result.frequency = frequencyNode.gain\n\n  const scriptInputMerge = context.createChannelMerger(2)\n  frequencyNode.connect(scriptInputMerge, 0, 0)\n  phaseNode.connect(scriptInputMerge, 0, 1)\n\n  const script = context.createScriptProcessor(audioConfig.bufferSize, 2, 2)\n  script.onaudioprocess = createProcessor(context.sampleRate)\n  scriptInputMerge.connect(script)\n\n  const scriptOutputSplit = context.createChannelSplitter(2)\n  script.connect(scriptOutputSplit)\n\n  scriptOutputSplit.connect(leftGain.gain, 0)\n  scriptOutputSplit.connect(rightGain.gain, 1)\n\n  const outputMerge = context.createChannelMerger(2)\n  leftGain.connect(outputMerge, 0, 0)\n  rightGain.connect(outputMerge, 0, 1)\n\n  // store these to avoid some chrome bugs with garbage collection of live nodes\n  result._gmn = [\n    leftGain,\n    rightGain,\n    constant,\n    phaseNode,\n    frequencyNode,\n    scriptInputMerge,\n    script,\n    scriptOutputSplit,\n    outputMerge\n  ]\n\n  result.connect = outputMerge.connect.bind(outputMerge)\n  result.disconnect = outputMerge.connect.bind(outputMerge)\n\n  constant.start()\n\n  return result\n}\n","import NoiseSourceNode from '../nodes/NoiseSourceNode'\nimport BinauralSourceNode from '../nodes/BinauralSourceNode'\nimport GainModulatorNode from '../nodes/GainModulatorNode'\n\nexport default class SelfHypnosis2 {\n  constructor(context) {\n    this.context = context\n    this.time = 0\n    this.startClock = 0\n    this.volume = 0.125\n\n    this.gain = context.createGain()\n    this.gain.gain.value = this.volume\n\n    this.binaural = new BinauralSourceNode(context)\n    this.binaural.audibleFrequency.value = 440\n    this.gainModulator = new GainModulatorNode(context)\n    this.gainModulator.phase.value = 0.0\n    this.phaseWobble = context.createOscillator()\n    this.phaseWobble.frequency.value = 8.0 / (15.0 * 60.0)\n    this.phaseWobbleGain = context.createGain()\n    this.phaseWobbleGain.gain.value = Math.PI\n\n    this.noise = new NoiseSourceNode(context)\n    this.noiseGainModulator = new GainModulatorNode(context)\n    this.noiseGainModulator.phase.value = Math.PI / 6\n    this.noiseGain = context.createGain()\n    this.noiseGain.gain.value = 0.5\n\n    this.binaural2 = new BinauralSourceNode(context)\n    this.binaural2.audibleFrequency.value = 100\n    this.binaural2.beatFrequency.value = 7\n    this.binaural2Gain = context.createGain()\n    this.binaural2Gain.gain.value = 0.8\n\n    this.binaural3 = new BinauralSourceNode(context)\n    this.binaural3.audibleFrequency.value = 800\n    this.binaural3.beatFrequency.value = 13\n    this.binaural3GainModulator = new GainModulatorNode(context)\n    this.binaural3GainModulator.frequency.value = 1.0\n    this.binaural3GainModulator.phase.value = Math.PI\n    this.binaural3Gain = context.createGain()\n    this.binaural3Gain.gain.value = 0.8\n\n    this.binaural4 = new BinauralSourceNode(context)\n    this.binaural4.audibleFrequency.value = 440\n    this.binaural4.beatFrequency.value = 10\n    this.binaural4Gain = context.createGain()\n    this.binaural4Gain.gain.value = 0.25\n  }\n\n  play() {\n    this.startClock = this.context.currentTime\n    const startTime = this.startClock - this.time\n\n    this.binaural.beatFrequency.cancelScheduledValues(startTime)\n    this.binaural.beatFrequency.setValueAtTime(12, startTime)\n    this.binaural.beatFrequency.linearRampToValueAtTime(8, startTime + 15 * 60)\n\n    this.gainModulator.frequency.cancelScheduledValues(startTime)\n    this.gainModulator.frequency.setValueAtTime(5, startTime)\n    this.gainModulator.frequency.linearRampToValueAtTime(2.5, startTime + 15 * 60)\n\n    this.noiseGainModulator.frequency.cancelScheduledValues(startTime)\n    this.noiseGainModulator.frequency.setValueAtTime(1, startTime)\n    this.noiseGainModulator.frequency.linearRampToValueAtTime(2.0 / 3.0, startTime + 15 * 60)\n\n    this.gain.connect(this.context.destination)\n    this.gainModulator.connect(this.gain)\n    this.phaseWobbleGain.connect(this.gainModulator.phase)\n    this.phaseWobble.connect(this.phaseWobbleGain)\n    this.binaural.connect(this.gainModulator)\n\n    this.noiseGain.connect(this.gain)\n    this.noiseGainModulator.connect(this.noiseGain)\n    this.noise.connect(this.noiseGainModulator)\n\n    this.binaural2Gain.connect(this.gain)\n    this.binaural2.connect(this.binaural2Gain)\n\n    this.binaural3Gain.connect(this.gain)\n    this.binaural3GainModulator.connect(this.binaural3Gain)\n    this.binaural3.connect(this.binaural3GainModulator)\n\n    this.binaural4Gain.connect(this.gain)\n    this.binaural4.connect(this.binaural4Gain)\n\n    this.binaural.start()\n    this.phaseWobble.start()\n    this.binaural2.start()\n    this.binaural3.start()\n    this.binaural4.start()\n  }\n\n  stop() {\n    this.time = this.context.currentTime - this.startClock\n\n    this.binaural.stop()\n    this.phaseWobble.stop()\n    this.binaural2.stop()\n    this.binaural3.stop()\n    this.binaural4.stop()\n\n    this.gain.disconnect(this.context.destination)\n    this.gainModulator.disconnect(this.gain)\n    this.phaseWobbleGain.disconnect(this.gainModulator.phase)\n    this.phaseWobble.disconnect(this.phaseWobbleGain)\n    this.binaural.disconnect(this.gainModulator)\n\n    this.noiseGain.disconnect(this.gain)\n    this.noiseGainModulator.disconnect(this.noiseGain)\n    this.noise.disconnect(this.noiseGainModulator)\n\n    this.binaural2Gain.disconnect(this.gain)\n    this.binaural2.disconnect(this.binaural2Gain)\n\n    this.binaural3Gain.disconnect(this.gain)\n    this.binaural3GainModulator.disconnect(this.binaural3Gain)\n    this.binaural3.disconnect(this.binaural3GainModulator)\n\n    this.binaural4Gain.disconnect(this.gain)\n    this.binaural4.disconnect(this.binaural4Gain)\n  }\n}\n"],"names":["wrap","jsNode","nativeNode","Object","defineProperty","get","channelCount","channelCountMode","set","v","channelInterpretation","numberOfOutputs","connect","bind","disconnect","bufferSize","NoiseSourceNode","[object Object]","context","this","node","createScriptProcessor","audioConfig","onaudioprocess","audioProcessingEvent","channel","data","outputBuffer","getChannelData","i","length","Math","random","BinauralSourceNode","constant","createConstantSource","audibleFrequencyNode","createGain","beatFrequencyNode","half","gain","value","inverseHalf","left","createOscillator","frequency","right","merge","createChannelMerger","type","audibleFrequency","beatFrequency","args","start","stop","periodicWave","setPeriodicWave","GainModulatorNode","result","createChannelSplitter","leftGain","rightGain","phaseNode","phase","frequencyNode","scriptInputMerge","script","sampleRate","samples","frequencyValues","inputBuffer","phaseValues","leftGainValues","rightGainValues","periodInSamples","sin","PI","Number","isFinite","isNaN","mod","floor","createProcessor","scriptOutputSplit","outputMerge","_gmn","time","startClock","volume","binaural","gainModulator","phaseWobble","phaseWobbleGain","noise","noiseGainModulator","noiseGain","binaural2","binaural2Gain","binaural3","binaural3GainModulator","binaural3Gain","binaural4","binaural4Gain","currentTime","startTime","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","destination"],"mappings":"mCAAO,SAASA,EAAKC,EAAQC,GAC3BC,OAAOC,eAAeH,EAAQ,eAAgB,CAC5CI,IAAK,IAAMH,EAAWI,eAExBH,OAAOC,eAAeH,EAAQ,mBAAoB,CAChDI,IAAK,IAAMH,EAAWK,iBACtBC,IAAMC,GAAMP,EAAWK,iBAAmBE,IAE5CN,OAAOC,eAAeH,EAAQ,wBAAyB,CACrDI,IAAK,IAAMH,EAAWQ,sBACtBF,IAAMC,GAAMP,EAAWQ,sBAAwBD,IAEjDN,OAAOC,eAAeH,EAAQ,iBAAkB,CAC9CI,IAAK,IAAM,IAEbF,OAAOC,eAAeH,EAAQ,kBAAmB,CAC/CI,IAAK,IAAMH,EAAWS,kBAGxBV,EAAOW,QAAUV,EAAWU,QAAQC,KAAKX,GACzCD,EAAOa,WAAaZ,EAAWY,WAAWD,KAAKX,SCpBlC,CAACa,WAAY,OCGb,MAAMC,EACnBC,YAAYC,GACVC,KAAKD,QAAUA,EACfC,KAAKC,KAAOF,EAAQG,sBAAsBC,EAAYP,WAAY,EAAG,GACrEI,KAAKC,KAAKG,eAAiBC,CAAAA,IACzB,IAAK,IAAIC,EAAU,EAAGA,EAAU,EAAGA,IAAW,CAC5C,MAAMC,EAAOF,EAAqBG,aAAaC,eAAeH,GAC9D,IAAK,IAAII,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC/BH,EAAKG,GAAK,EAAIE,KAAKC,SAAW,KAKpChC,EAAKmB,KAAMA,KAAKC,OCdL,MAAMa,EACnBhB,YAAYC,GACVC,KAAKD,QAAUA,EACfC,KAAKe,SAAWhB,EAAQiB,uBACxBhB,KAAKiB,qBAAuBlB,EAAQmB,aACpClB,KAAKmB,kBAAoBpB,EAAQmB,aAEjClB,KAAKoB,KAAOrB,EAAQmB,aACpBlB,KAAKoB,KAAKC,KAAKC,MAAQ,GAEvBtB,KAAKuB,YAAcxB,EAAQmB,aAC3BlB,KAAKuB,YAAYF,KAAKC,OAAS,GAE/BtB,KAAKwB,KAAOzB,EAAQ0B,mBACpBzB,KAAKwB,KAAKE,UAAUJ,MAAQ,EAC5BtB,KAAK2B,MAAQ5B,EAAQ0B,mBACrBzB,KAAK2B,MAAMD,UAAUJ,MAAQ,EAC7BtB,KAAK4B,MAAQ7B,EAAQ8B,oBAAoB,GAEzC7B,KAAKe,SAAStB,QAAQO,KAAKiB,sBAC3BjB,KAAKe,SAAStB,QAAQO,KAAKmB,mBAC3BnB,KAAKmB,kBAAkB1B,QAAQO,KAAKoB,MACpCpB,KAAKmB,kBAAkB1B,QAAQO,KAAKuB,aAEpCvB,KAAKiB,qBAAqBxB,QAAQO,KAAKwB,KAAKE,WAC5C1B,KAAKiB,qBAAqBxB,QAAQO,KAAK2B,MAAMD,WAC7C1B,KAAKuB,YAAY9B,QAAQO,KAAKwB,KAAKE,WACnC1B,KAAKoB,KAAK3B,QAAQO,KAAK2B,MAAMD,WAE7B1B,KAAKwB,KAAK/B,QAAQO,KAAK4B,MAAO,EAAG,GACjC5B,KAAK2B,MAAMlC,QAAQO,KAAK4B,MAAO,EAAG,GAElC/C,EAAKmB,KAAMA,KAAK4B,OAGlBE,WACE,OAAO9B,KAAKwB,KAAKM,KAGnBA,SAASxC,GACPU,KAAKwB,KAAKM,KAAOxC,EACjBU,KAAK2B,MAAMG,KAAOxC,EAGpByC,uBACE,OAAO/B,KAAKiB,qBAAqBI,KAGnCW,oBACE,OAAOhC,KAAKmB,kBAAkBE,KAGhCvB,SAASmC,GACPjC,KAAKe,SAASmB,SAASD,GACvBjC,KAAKwB,KAAKU,SAASD,GACnBjC,KAAK2B,MAAMO,SAASD,GAGtBnC,QAAQmC,GACNjC,KAAKe,SAASoB,QAAQF,GACtBjC,KAAKwB,KAAKW,QAAQF,GAClBjC,KAAK2B,MAAMQ,QAAQF,GAGrBnC,gBAAgBsC,GACdpC,KAAKwB,KAAKa,gBAAgBD,GAC1BpC,KAAK2B,MAAMU,gBAAgBD,IC3ChB,SAASE,EAAkBvC,GACxC,MAAMwC,EAASxC,EAAQyC,sBAAsB,GAEvCC,EAAW1C,EAAQmB,aACzBuB,EAASpB,KAAKC,MAAQ,EACtBiB,EAAO9C,QAAQgD,EAAU,GACzB,MAAMC,EAAY3C,EAAQmB,aAC1BwB,EAAUrB,KAAKC,MAAQ,EACvBiB,EAAO9C,QAAQiD,EAAW,GAE1B,MAAM3B,EAAWhB,EAAQiB,uBACnB2B,EAAY5C,EAAQmB,aAC1BH,EAAStB,QAAQkD,GACjBJ,EAAOK,MAAQD,EAAUtB,KAEzB,MAAMwB,EAAgB9C,EAAQmB,aAC9BH,EAAStB,QAAQoD,GACjBN,EAAOb,UAAYmB,EAAcxB,KAEjC,MAAMyB,EAAmB/C,EAAQ8B,oBAAoB,GACrDgB,EAAcpD,QAAQqD,EAAkB,EAAG,GAC3CH,EAAUlD,QAAQqD,EAAkB,EAAG,GAEvC,MAAMC,EAAShD,EAAQG,sBAAsBC,EAAYP,WAAY,EAAG,GACxEmD,EAAO3C,eA/CT,SAAyB4C,GACvB,IAAIC,EAAU,EACd,OAAQ5C,IACN,MAAM6C,EAAkB7C,EAAqB8C,YAAY1C,eAAe,GAClE2C,EAAc/C,EAAqB8C,YAAY1C,eAAe,GAC9D4C,EAAiBhD,EAAqBG,aAAaC,eAAe,GAClE6C,EAAkBjD,EAAqBG,aAAaC,eAAe,GAEzE,IAAI8C,EACJ,IAAI,IAAI7C,EAAI,EAAGA,EAAIwC,EAAgBvC,OAAQD,IACzC6C,EAAkBP,EAAaE,EAAgBxC,GAC/C2C,EAAe3C,GAAY,GAAK,EAAI,EAAIE,KAAK4C,IAAoB,GAAfP,EAAUvC,GAASE,KAAK6C,GAAKF,EAAkBH,EAAY1C,KAAxF,GACrB4C,EAAgB5C,GAAY,GAAK,EAAI,EAAIE,KAAK4C,IAAoB,GAAfP,EAAUvC,GAASE,KAAK6C,GAAKF,EAAkBH,EAAY1C,KAAxF,GAExB,GAAIgD,OAAOC,SAASJ,KAAqBG,OAAOE,MAAML,GAAkB,CACtE,MAAMM,EAAMjD,KAAKkD,MAAMP,GACZ,GAAPM,IACFZ,GAAWA,EAAUC,EAAgBvC,QAAUkD,KA8B7BE,CAAgBhE,EAAQiD,YAChDF,EAAiBrD,QAAQsD,GAEzB,MAAMiB,EAAoBjE,EAAQyC,sBAAsB,GACxDO,EAAOtD,QAAQuE,GAEfA,EAAkBvE,QAAQgD,EAASpB,KAAM,GACzC2C,EAAkBvE,QAAQiD,EAAUrB,KAAM,GAE1C,MAAM4C,EAAclE,EAAQ8B,oBAAoB,GAsBhD,OArBAY,EAAShD,QAAQwE,EAAa,EAAG,GACjCvB,EAAUjD,QAAQwE,EAAa,EAAG,GAGlC1B,EAAO2B,KAAO,CACZzB,EACAC,EACA3B,EACA4B,EACAE,EACAC,EACAC,EACAiB,EACAC,GAGF1B,EAAO9C,QAAUwE,EAAYxE,QAAQC,KAAKuE,GAC1C1B,EAAO5C,WAAasE,EAAYxE,QAAQC,KAAKuE,GAE7ClD,EAASmB,QAEFK,qCC5EM,MACbzC,YAAYC,GACVC,KAAKD,QAAUA,EACfC,KAAKmE,KAAO,EACZnE,KAAKoE,WAAa,EAClBpE,KAAKqE,OAAS,KAEdrE,KAAKqB,KAAOtB,EAAQmB,aACpBlB,KAAKqB,KAAKA,KAAKC,MAAQtB,KAAKqE,OAE5BrE,KAAKsE,SAAW,IAAIxD,EAAmBf,GACvCC,KAAKsE,SAASvC,iBAAiBT,MAAQ,IACvCtB,KAAKuE,cAAgB,IAAIjC,EAAkBvC,GAC3CC,KAAKuE,cAAc3B,MAAMtB,MAAQ,EACjCtB,KAAKwE,YAAczE,EAAQ0B,mBAC3BzB,KAAKwE,YAAY9C,UAAUJ,MAAQ,MACnCtB,KAAKyE,gBAAkB1E,EAAQmB,aAC/BlB,KAAKyE,gBAAgBpD,KAAKC,MAAQV,KAAK6C,GAEvCzD,KAAK0E,MAAQ,IAAI7E,EAAgBE,GACjCC,KAAK2E,mBAAqB,IAAIrC,EAAkBvC,GAChDC,KAAK2E,mBAAmB/B,MAAMtB,MAAQV,KAAK6C,GAAK,EAChDzD,KAAK4E,UAAY7E,EAAQmB,aACzBlB,KAAK4E,UAAUvD,KAAKC,MAAQ,GAE5BtB,KAAK6E,UAAY,IAAI/D,EAAmBf,GACxCC,KAAK6E,UAAU9C,iBAAiBT,MAAQ,IACxCtB,KAAK6E,UAAU7C,cAAcV,MAAQ,EACrCtB,KAAK8E,cAAgB/E,EAAQmB,aAC7BlB,KAAK8E,cAAczD,KAAKC,MAAQ,GAEhCtB,KAAK+E,UAAY,IAAIjE,EAAmBf,GACxCC,KAAK+E,UAAUhD,iBAAiBT,MAAQ,IACxCtB,KAAK+E,UAAU/C,cAAcV,MAAQ,GACrCtB,KAAKgF,uBAAyB,IAAI1C,EAAkBvC,GACpDC,KAAKgF,uBAAuBtD,UAAUJ,MAAQ,EAC9CtB,KAAKgF,uBAAuBpC,MAAMtB,MAAQV,KAAK6C,GAC/CzD,KAAKiF,cAAgBlF,EAAQmB,aAC7BlB,KAAKiF,cAAc5D,KAAKC,MAAQ,GAEhCtB,KAAKkF,UAAY,IAAIpE,EAAmBf,GACxCC,KAAKkF,UAAUnD,iBAAiBT,MAAQ,IACxCtB,KAAKkF,UAAUlD,cAAcV,MAAQ,GACrCtB,KAAKmF,cAAgBpF,EAAQmB,aAC7BlB,KAAKmF,cAAc9D,KAAKC,MAAQ,IAGlCxB,OACEE,KAAKoE,WAAapE,KAAKD,QAAQqF,YAC/B,MAAMC,EAAYrF,KAAKoE,WAAapE,KAAKmE,KAEzCnE,KAAKsE,SAAStC,cAAcsD,sBAAsBD,GAClDrF,KAAKsE,SAAStC,cAAcuD,eAAe,GAAIF,GAC/CrF,KAAKsE,SAAStC,cAAcwD,wBAAwB,EAAGH,EAAY,KAEnErF,KAAKuE,cAAc7C,UAAU4D,sBAAsBD,GACnDrF,KAAKuE,cAAc7C,UAAU6D,eAAe,EAAGF,GAC/CrF,KAAKuE,cAAc7C,UAAU8D,wBAAwB,IAAKH,EAAY,KAEtErF,KAAK2E,mBAAmBjD,UAAU4D,sBAAsBD,GACxDrF,KAAK2E,mBAAmBjD,UAAU6D,eAAe,EAAGF,GACpDrF,KAAK2E,mBAAmBjD,UAAU8D,wBAAwB,EAAM,EAAKH,EAAY,KAEjFrF,KAAKqB,KAAK5B,QAAQO,KAAKD,QAAQ0F,aAC/BzF,KAAKuE,cAAc9E,QAAQO,KAAKqB,MAChCrB,KAAKyE,gBAAgBhF,QAAQO,KAAKuE,cAAc3B,OAChD5C,KAAKwE,YAAY/E,QAAQO,KAAKyE,iBAC9BzE,KAAKsE,SAAS7E,QAAQO,KAAKuE,eAE3BvE,KAAK4E,UAAUnF,QAAQO,KAAKqB,MAC5BrB,KAAK2E,mBAAmBlF,QAAQO,KAAK4E,WACrC5E,KAAK0E,MAAMjF,QAAQO,KAAK2E,oBAExB3E,KAAK8E,cAAcrF,QAAQO,KAAKqB,MAChCrB,KAAK6E,UAAUpF,QAAQO,KAAK8E,eAE5B9E,KAAKiF,cAAcxF,QAAQO,KAAKqB,MAChCrB,KAAKgF,uBAAuBvF,QAAQO,KAAKiF,eACzCjF,KAAK+E,UAAUtF,QAAQO,KAAKgF,wBAE5BhF,KAAKmF,cAAc1F,QAAQO,KAAKqB,MAChCrB,KAAKkF,UAAUzF,QAAQO,KAAKmF,eAE5BnF,KAAKsE,SAASpC,QACdlC,KAAKwE,YAAYtC,QACjBlC,KAAK6E,UAAU3C,QACflC,KAAK+E,UAAU7C,QACflC,KAAKkF,UAAUhD,QAGjBpC,OACEE,KAAKmE,KAAOnE,KAAKD,QAAQqF,YAAcpF,KAAKoE,WAE5CpE,KAAKsE,SAASnC,OACdnC,KAAKwE,YAAYrC,OACjBnC,KAAK6E,UAAU1C,OACfnC,KAAK+E,UAAU5C,OACfnC,KAAKkF,UAAU/C,OAEfnC,KAAKqB,KAAK1B,WAAWK,KAAKD,QAAQ0F,aAClCzF,KAAKuE,cAAc5E,WAAWK,KAAKqB,MACnCrB,KAAKyE,gBAAgB9E,WAAWK,KAAKuE,cAAc3B,OACnD5C,KAAKwE,YAAY7E,WAAWK,KAAKyE,iBACjCzE,KAAKsE,SAAS3E,WAAWK,KAAKuE,eAE9BvE,KAAK4E,UAAUjF,WAAWK,KAAKqB,MAC/BrB,KAAK2E,mBAAmBhF,WAAWK,KAAK4E,WACxC5E,KAAK0E,MAAM/E,WAAWK,KAAK2E,oBAE3B3E,KAAK8E,cAAcnF,WAAWK,KAAKqB,MACnCrB,KAAK6E,UAAUlF,WAAWK,KAAK8E,eAE/B9E,KAAKiF,cAActF,WAAWK,KAAKqB,MACnCrB,KAAKgF,uBAAuBrF,WAAWK,KAAKiF,eAC5CjF,KAAK+E,UAAUpF,WAAWK,KAAKgF,wBAE/BhF,KAAKmF,cAAcxF,WAAWK,KAAKqB,MACnCrB,KAAKkF,UAAUvF,WAAWK,KAAKmF"}