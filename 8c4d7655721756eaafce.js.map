{"version":3,"sources":["webpack:///8c4d7655721756eaafce.js","webpack:///webpack/bootstrap 8c4d7655721756eaafce","webpack:///./src/demo.coffee","webpack:///./bower_components/modernizr/modernizr.js","webpack:///external \"noisy\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","AudioContext","Modernizr","SelfHypnosis2","context","player","prefixed","window","presets","play","document","undefined","setCss","str","mStyle","cssText","setCssAll","str1","str2","prefixes","join","is","obj","type","contains","substr","indexOf","testProps","props","i","prop","testDOMProps","elem","item","bind","testPropsAll","ucProp","charAt","toUpperCase","slice","cssomPrefixes","split","webforms","len","length","attrs","inputElem","list","createElement","HTMLDataListElement","bool","inputElemType","defaultView","setAttribute","value","smile","style","test","WebkitAppearance","docElement","appendChild","getComputedStyle","offsetHeight","removeChild","checkValidity","inputs","featureName","hasOwnProp","version","enableClasses","documentElement","mod","modElem","toString","omPrefixes","domPrefixes","toLowerCase","ns","svg","tests","classes","injectElementWithStyles","rule","callback","nodes","testnames","ret","node","docOverflow","div","body","fakeBody","parseInt","innerHTML","background","overflow","parentNode","testMediaQuery","mq","matchMedia","msMatchMedia","matches","currentStyle","isEventSupported","eventName","element","TAGNAMES","isSupported","removeAttribute","select","change","submit","reset","error","load","abort","_hasOwnProperty","hasOwnProperty","object","property","constructor","prototype","Function","that","target","this","TypeError","args","arguments","bound","F","self","result","apply","concat","Object","getContext","fillText","WebGLRenderingContext","DocumentTouch","offsetTop","navigator","postMessage","openDatabase","documentMode","history","pushState","backgroundColor","textShadow","opacity","str3","backgroundImage","offsetLeft","getElementById","sheet","styleSheet","cssRules","canPlayType","Boolean","ogg","replace","h264","webm","e","mp3","wav","m4a","localStorage","setItem","removeItem","sessionStorage","Worker","applicationCache","createElementNS","createSVGRect","firstChild","namespaceURI","feature","push","input","addTest","key","className","addStyleSheet","ownerDocument","parent","getElementsByTagName","insertBefore","lastChild","getElements","elements","html5","getExpandoData","data","expandoData","expando","expanID","nodeName","supportsUnknownElements","cache","cloneNode","saveClones","createElem","canHaveChildren","reSkip","frag","createDocumentFragment","clone","elems","l","shivMethods","createFrag","shivDocument","shivCSS","supportsHtml5Styles","hasCSS","options","a","childNodes","_version","_prefixes","_domPrefixes","_cssomPrefixes","hasEvent","testProp","testAllProps","testStyles","noisy"],"mappings":"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","file":"8c4d7655721756eaafce.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar AudioContext, Modernizr, SelfHypnosis2, context, player;\n\t\n\tModernizr = __webpack_require__(1);\n\t\n\tAudioContext = Modernizr.prefixed('AudioContext', window);\n\t\n\tcontext = new AudioContext();\n\t\n\tSelfHypnosis2 = (__webpack_require__(2)).presets.SelfHypnosis2;\n\t\n\tplayer = new SelfHypnosis2(context);\n\t\n\tif (false) {\n\t  module.hot.accept('./index', function() {\n\t    player.stop();\n\t    SelfHypnosis2 = (require('./index')).presets.SelfHypnosis2;\n\t    player = new SelfHypnosis2(context);\n\t    return player.play();\n\t  });\n\t  module.hot.accept();\n\t  module.hot.dispose(function(data) {\n\t    player.stop();\n\t    return data.time = player.time;\n\t  });\n\t  if (module.hot.data) {\n\t    player.time = module.hot.data.time;\n\t  }\n\t}\n\t\n\tplayer.play();\n\t\n\twindow.player = player;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\t(function() {\n\t\n\t/*!\n\t * Modernizr v2.6.3\n\t * www.modernizr.com\n\t *\n\t * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\n\t * Available under the BSD and MIT licenses: www.modernizr.com/license/\n\t */\n\t\n\t/*\n\t * Modernizr tests which native CSS3 and HTML5 features are available in\n\t * the current UA and makes the results available to you in two ways:\n\t * as properties on a global Modernizr object, and as classes on the\n\t * <html> element. This information allows you to progressively enhance\n\t * your pages with a granular level of control over the experience.\n\t *\n\t * Modernizr has an optional (not included) conditional resource loader\n\t * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n\t * To get a build that includes Modernizr.load(), as well as choosing\n\t * which tests to include, go to www.modernizr.com/download/\n\t *\n\t * Authors        Faruk Ates, Paul Irish, Alex Sexton\n\t * Contributors   Ryan Seddon, Ben Alman\n\t */\n\t\n\twindow.Modernizr = (function( window, document, undefined ) {\n\t\n\t    var version = '2.6.3',\n\t\n\t    Modernizr = {},\n\t\n\t    /*>>cssclasses*/\n\t    // option for enabling the HTML classes to be added\n\t    enableClasses = true,\n\t    /*>>cssclasses*/\n\t\n\t    docElement = document.documentElement,\n\t\n\t    /**\n\t     * Create our \"modernizr\" element that we do most feature tests on.\n\t     */\n\t    mod = 'modernizr',\n\t    modElem = document.createElement(mod),\n\t    mStyle = modElem.style,\n\t\n\t    /**\n\t     * Create the input element for various Web Forms feature tests.\n\t     */\n\t    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,\n\t\n\t    /*>>smile*/\n\t    smile = ':)',\n\t    /*>>smile*/\n\t\n\t    toString = {}.toString,\n\t\n\t    // TODO :: make the prefixes more granular\n\t    /*>>prefixes*/\n\t    // List of property values to set for css tests. See ticket #21\n\t    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),\n\t    /*>>prefixes*/\n\t\n\t    /*>>domprefixes*/\n\t    // Following spec is to expose vendor-specific style properties as:\n\t    //   elem.style.WebkitBorderRadius\n\t    // and the following would be incorrect:\n\t    //   elem.style.webkitBorderRadius\n\t\n\t    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n\t    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n\t    //   erik.eae.net/archives/2008/03/10/21.48.10/\n\t\n\t    // More here: github.com/Modernizr/Modernizr/issues/issue/21\n\t    omPrefixes = 'Webkit Moz O ms',\n\t\n\t    cssomPrefixes = omPrefixes.split(' '),\n\t\n\t    domPrefixes = omPrefixes.toLowerCase().split(' '),\n\t    /*>>domprefixes*/\n\t\n\t    /*>>ns*/\n\t    ns = {'svg': 'http://www.w3.org/2000/svg'},\n\t    /*>>ns*/\n\t\n\t    tests = {},\n\t    inputs = {},\n\t    attrs = {},\n\t\n\t    classes = [],\n\t\n\t    slice = classes.slice,\n\t\n\t    featureName, // used in testing loop\n\t\n\t\n\t    /*>>teststyles*/\n\t    // Inject element with style element and some CSS rules\n\t    injectElementWithStyles = function( rule, callback, nodes, testnames ) {\n\t\n\t      var style, ret, node, docOverflow,\n\t          div = document.createElement('div'),\n\t          // After page load injecting a fake body doesn't work so check if body exists\n\t          body = document.body,\n\t          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.\n\t          fakeBody = body || document.createElement('body');\n\t\n\t      if ( parseInt(nodes, 10) ) {\n\t          // In order not to give false positives we create a node for each test\n\t          // This also allows the method to scale for unspecified uses\n\t          while ( nodes-- ) {\n\t              node = document.createElement('div');\n\t              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n\t              div.appendChild(node);\n\t          }\n\t      }\n\t\n\t      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\n\t      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\n\t      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\n\t      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\n\t      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277\n\t      style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');\n\t      div.id = mod;\n\t      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n\t      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n\t      (body ? div : fakeBody).innerHTML += style;\n\t      fakeBody.appendChild(div);\n\t      if ( !body ) {\n\t          //avoid crashing IE8, if background image is used\n\t          fakeBody.style.background = '';\n\t          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n\t          fakeBody.style.overflow = 'hidden';\n\t          docOverflow = docElement.style.overflow;\n\t          docElement.style.overflow = 'hidden';\n\t          docElement.appendChild(fakeBody);\n\t      }\n\t\n\t      ret = callback(div, rule);\n\t      // If this is done after page load we don't want to remove the body so check if body exists\n\t      if ( !body ) {\n\t          fakeBody.parentNode.removeChild(fakeBody);\n\t          docElement.style.overflow = docOverflow;\n\t      } else {\n\t          div.parentNode.removeChild(div);\n\t      }\n\t\n\t      return !!ret;\n\t\n\t    },\n\t    /*>>teststyles*/\n\t\n\t    /*>>mq*/\n\t    // adapted from matchMedia polyfill\n\t    // by Scott Jehl and Paul Irish\n\t    // gist.github.com/786768\n\t    testMediaQuery = function( mq ) {\n\t\n\t      var matchMedia = window.matchMedia || window.msMatchMedia;\n\t      if ( matchMedia ) {\n\t        return matchMedia(mq).matches;\n\t      }\n\t\n\t      var bool;\n\t\n\t      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {\n\t        bool = (window.getComputedStyle ?\n\t                  getComputedStyle(node, null) :\n\t                  node.currentStyle)['position'] == 'absolute';\n\t      });\n\t\n\t      return bool;\n\t\n\t     },\n\t     /*>>mq*/\n\t\n\t\n\t    /*>>hasevent*/\n\t    //\n\t    // isEventSupported determines if a given element supports the given event\n\t    // kangax.github.com/iseventsupported/\n\t    //\n\t    // The following results are known incorrects:\n\t    //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\n\t    //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\n\t    //   ...\n\t    isEventSupported = (function() {\n\t\n\t      var TAGNAMES = {\n\t        'select': 'input', 'change': 'input',\n\t        'submit': 'form', 'reset': 'form',\n\t        'error': 'img', 'load': 'img', 'abort': 'img'\n\t      };\n\t\n\t      function isEventSupported( eventName, element ) {\n\t\n\t        element = element || document.createElement(TAGNAMES[eventName] || 'div');\n\t        eventName = 'on' + eventName;\n\t\n\t        // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\n\t        var isSupported = eventName in element;\n\t\n\t        if ( !isSupported ) {\n\t          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\n\t          if ( !element.setAttribute ) {\n\t            element = document.createElement('div');\n\t          }\n\t          if ( element.setAttribute && element.removeAttribute ) {\n\t            element.setAttribute(eventName, '');\n\t            isSupported = is(element[eventName], 'function');\n\t\n\t            // If property was created, \"remove it\" (by setting value to `undefined`)\n\t            if ( !is(element[eventName], 'undefined') ) {\n\t              element[eventName] = undefined;\n\t            }\n\t            element.removeAttribute(eventName);\n\t          }\n\t        }\n\t\n\t        element = null;\n\t        return isSupported;\n\t      }\n\t      return isEventSupported;\n\t    })(),\n\t    /*>>hasevent*/\n\t\n\t    // TODO :: Add flag for hasownprop ? didn't last time\n\t\n\t    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n\t    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;\n\t\n\t    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {\n\t      hasOwnProp = function (object, property) {\n\t        return _hasOwnProperty.call(object, property);\n\t      };\n\t    }\n\t    else {\n\t      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n\t        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n\t      };\n\t    }\n\t\n\t    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\n\t    // es5.github.com/#x15.3.4.5\n\t\n\t    if (!Function.prototype.bind) {\n\t      Function.prototype.bind = function bind(that) {\n\t\n\t        var target = this;\n\t\n\t        if (typeof target != \"function\") {\n\t            throw new TypeError();\n\t        }\n\t\n\t        var args = slice.call(arguments, 1),\n\t            bound = function () {\n\t\n\t            if (this instanceof bound) {\n\t\n\t              var F = function(){};\n\t              F.prototype = target.prototype;\n\t              var self = new F();\n\t\n\t              var result = target.apply(\n\t                  self,\n\t                  args.concat(slice.call(arguments))\n\t              );\n\t              if (Object(result) === result) {\n\t                  return result;\n\t              }\n\t              return self;\n\t\n\t            } else {\n\t\n\t              return target.apply(\n\t                  that,\n\t                  args.concat(slice.call(arguments))\n\t              );\n\t\n\t            }\n\t\n\t        };\n\t\n\t        return bound;\n\t      };\n\t    }\n\t\n\t    /**\n\t     * setCss applies given styles to the Modernizr DOM node.\n\t     */\n\t    function setCss( str ) {\n\t        mStyle.cssText = str;\n\t    }\n\t\n\t    /**\n\t     * setCssAll extrapolates all vendor-specific css strings.\n\t     */\n\t    function setCssAll( str1, str2 ) {\n\t        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\n\t    }\n\t\n\t    /**\n\t     * is returns a boolean for if typeof obj is exactly type.\n\t     */\n\t    function is( obj, type ) {\n\t        return typeof obj === type;\n\t    }\n\t\n\t    /**\n\t     * contains returns a boolean for if substr is found within str.\n\t     */\n\t    function contains( str, substr ) {\n\t        return !!~('' + str).indexOf(substr);\n\t    }\n\t\n\t    /*>>testprop*/\n\t\n\t    // testProps is a generic CSS / DOM property test.\n\t\n\t    // In testing support for a given CSS property, it's legit to test:\n\t    //    `elem.style[styleName] !== undefined`\n\t    // If the property is supported it will return an empty string,\n\t    // if unsupported it will return undefined.\n\t\n\t    // We'll take advantage of this quick test and skip setting a style\n\t    // on our modernizr element, but instead just testing undefined vs\n\t    // empty string.\n\t\n\t    // Because the testing of the CSS property names (with \"-\", as\n\t    // opposed to the camelCase DOM properties) is non-portable and\n\t    // non-standard but works in WebKit and IE (but not Gecko or Opera),\n\t    // we explicitly reject properties with dashes so that authors\n\t    // developing in WebKit or IE first don't end up with\n\t    // browser-specific content by accident.\n\t\n\t    function testProps( props, prefixed ) {\n\t        for ( var i in props ) {\n\t            var prop = props[i];\n\t            if ( !contains(prop, \"-\") && mStyle[prop] !== undefined ) {\n\t                return prefixed == 'pfx' ? prop : true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    /*>>testprop*/\n\t\n\t    // TODO :: add testDOMProps\n\t    /**\n\t     * testDOMProps is a generic DOM property test; if a browser supports\n\t     *   a certain property, it won't return undefined for it.\n\t     */\n\t    function testDOMProps( props, obj, elem ) {\n\t        for ( var i in props ) {\n\t            var item = obj[props[i]];\n\t            if ( item !== undefined) {\n\t\n\t                // return the property name as a string\n\t                if (elem === false) return props[i];\n\t\n\t                // let's bind a function\n\t                if (is(item, 'function')){\n\t                  // default to autobind unless override\n\t                  return item.bind(elem || obj);\n\t                }\n\t\n\t                // return the unbound function or obj or value\n\t                return item;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t\n\t    /*>>testallprops*/\n\t    /**\n\t     * testPropsAll tests a list of DOM properties we want to check against.\n\t     *   We specify literally ALL possible (known and/or likely) properties on\n\t     *   the element including the non-vendor prefixed one, for forward-\n\t     *   compatibility.\n\t     */\n\t    function testPropsAll( prop, prefixed, elem ) {\n\t\n\t        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),\n\t            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\t\n\t        // did they call .prefixed('boxSizing') or are we just testing a prop?\n\t        if(is(prefixed, \"string\") || is(prefixed, \"undefined\")) {\n\t          return testProps(props, prefixed);\n\t\n\t        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n\t        } else {\n\t          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n\t          return testDOMProps(props, prefixed, elem);\n\t        }\n\t    }\n\t    /*>>testallprops*/\n\t\n\t\n\t    /**\n\t     * Tests\n\t     * -----\n\t     */\n\t\n\t    // The *new* flexbox\n\t    // dev.w3.org/csswg/css3-flexbox\n\t\n\t    tests['flexbox'] = function() {\n\t      return testPropsAll('flexWrap');\n\t    };\n\t\n\t    // The *old* flexbox\n\t    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/\n\t\n\t    tests['flexboxlegacy'] = function() {\n\t        return testPropsAll('boxDirection');\n\t    };\n\t\n\t    // On the S60 and BB Storm, getContext exists, but always returns undefined\n\t    // so we actually have to call getContext() to verify\n\t    // github.com/Modernizr/Modernizr/issues/issue/97/\n\t\n\t    tests['canvas'] = function() {\n\t        var elem = document.createElement('canvas');\n\t        return !!(elem.getContext && elem.getContext('2d'));\n\t    };\n\t\n\t    tests['canvastext'] = function() {\n\t        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));\n\t    };\n\t\n\t    // webk.it/70117 is tracking a legit WebGL feature detect proposal\n\t\n\t    // We do a soft detect which may false positive in order to avoid\n\t    // an expensive context creation: bugzil.la/732441\n\t\n\t    tests['webgl'] = function() {\n\t        return !!window.WebGLRenderingContext;\n\t    };\n\t\n\t    /*\n\t     * The Modernizr.touch test only indicates if the browser supports\n\t     *    touch events, which does not necessarily reflect a touchscreen\n\t     *    device, as evidenced by tablets running Windows 7 or, alas,\n\t     *    the Palm Pre / WebOS (touch) phones.\n\t     *\n\t     * Additionally, Chrome (desktop) used to lie about its support on this,\n\t     *    but that has since been rectified: crbug.com/36415\n\t     *\n\t     * We also test for Firefox 4 Multitouch Support.\n\t     *\n\t     * For more info, see: modernizr.github.com/Modernizr/touch.html\n\t     */\n\t\n\t    tests['touch'] = function() {\n\t        var bool;\n\t\n\t        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n\t          bool = true;\n\t        } else {\n\t          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {\n\t            bool = node.offsetTop === 9;\n\t          });\n\t        }\n\t\n\t        return bool;\n\t    };\n\t\n\t\n\t    // geolocation is often considered a trivial feature detect...\n\t    // Turns out, it's quite tricky to get right:\n\t    //\n\t    // Using !!navigator.geolocation does two things we don't want. It:\n\t    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513\n\t    //   2. Disables page caching in WebKit: webk.it/43956\n\t    //\n\t    // Meanwhile, in Firefox < 8, an about:config setting could expose\n\t    // a false positive that would throw an exception: bugzil.la/688158\n\t\n\t    tests['geolocation'] = function() {\n\t        return 'geolocation' in navigator;\n\t    };\n\t\n\t\n\t    tests['postmessage'] = function() {\n\t      return !!window.postMessage;\n\t    };\n\t\n\t\n\t    // Chrome incognito mode used to throw an exception when using openDatabase\n\t    // It doesn't anymore.\n\t    tests['websqldatabase'] = function() {\n\t      return !!window.openDatabase;\n\t    };\n\t\n\t    // Vendors had inconsistent prefixing with the experimental Indexed DB:\n\t    // - Webkit's implementation is accessible through webkitIndexedDB\n\t    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\n\t    // For speed, we don't test the legacy (and beta-only) indexedDB\n\t    tests['indexedDB'] = function() {\n\t      return !!testPropsAll(\"indexedDB\", window);\n\t    };\n\t\n\t    // documentMode logic from YUI to filter out IE8 Compat Mode\n\t    //   which false positives.\n\t    tests['hashchange'] = function() {\n\t      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);\n\t    };\n\t\n\t    // Per 1.6:\n\t    // This used to be Modernizr.historymanagement but the longer\n\t    // name has been deprecated in favor of a shorter and property-matching one.\n\t    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n\t    // and in the first release thereafter disappear entirely.\n\t    tests['history'] = function() {\n\t      return !!(window.history && history.pushState);\n\t    };\n\t\n\t    tests['draganddrop'] = function() {\n\t        var div = document.createElement('div');\n\t        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);\n\t    };\n\t\n\t    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10\n\t    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.\n\t    // FF10 still uses prefixes, so check for it until then.\n\t    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/\n\t    tests['websockets'] = function() {\n\t        return 'WebSocket' in window || 'MozWebSocket' in window;\n\t    };\n\t\n\t\n\t    // css-tricks.com/rgba-browser-support/\n\t    tests['rgba'] = function() {\n\t        // Set an rgba() color and check the returned value\n\t\n\t        setCss('background-color:rgba(150,255,150,.5)');\n\t\n\t        return contains(mStyle.backgroundColor, 'rgba');\n\t    };\n\t\n\t    tests['hsla'] = function() {\n\t        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\n\t        //   except IE9 who retains it as hsla\n\t\n\t        setCss('background-color:hsla(120,40%,100%,.5)');\n\t\n\t        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');\n\t    };\n\t\n\t    tests['multiplebgs'] = function() {\n\t        // Setting multiple images AND a color on the background shorthand property\n\t        //  and then querying the style.background property value for the number of\n\t        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\n\t\n\t        setCss('background:url(https://),url(https://),red url(https://)');\n\t\n\t        // If the UA supports multiple backgrounds, there should be three occurrences\n\t        //   of the string \"url(\" in the return value for elemStyle.background\n\t\n\t        return (/(url\\s*\\(.*?){3}/).test(mStyle.background);\n\t    };\n\t\n\t\n\t\n\t    // this will false positive in Opera Mini\n\t    //   github.com/Modernizr/Modernizr/issues/396\n\t\n\t    tests['backgroundsize'] = function() {\n\t        return testPropsAll('backgroundSize');\n\t    };\n\t\n\t    tests['borderimage'] = function() {\n\t        return testPropsAll('borderImage');\n\t    };\n\t\n\t\n\t    // Super comprehensive table about all the unique implementations of\n\t    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance\n\t\n\t    tests['borderradius'] = function() {\n\t        return testPropsAll('borderRadius');\n\t    };\n\t\n\t    // WebOS unfortunately false positives on this test.\n\t    tests['boxshadow'] = function() {\n\t        return testPropsAll('boxShadow');\n\t    };\n\t\n\t    // FF3.0 will false positive on this test\n\t    tests['textshadow'] = function() {\n\t        return document.createElement('div').style.textShadow === '';\n\t    };\n\t\n\t\n\t    tests['opacity'] = function() {\n\t        // Browsers that actually have CSS Opacity implemented have done so\n\t        //  according to spec, which means their return values are within the\n\t        //  range of [0.0,1.0] - including the leading zero.\n\t\n\t        setCssAll('opacity:.55');\n\t\n\t        // The non-literal . in this regex is intentional:\n\t        //   German Chrome returns this value as 0,55\n\t        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n\t        return (/^0.55$/).test(mStyle.opacity);\n\t    };\n\t\n\t\n\t    // Note, Android < 4 will pass this test, but can only animate\n\t    //   a single property at a time\n\t    //   daneden.me/2011/12/putting-up-with-androids-bullshit/\n\t    tests['cssanimations'] = function() {\n\t        return testPropsAll('animationName');\n\t    };\n\t\n\t\n\t    tests['csscolumns'] = function() {\n\t        return testPropsAll('columnCount');\n\t    };\n\t\n\t\n\t    tests['cssgradients'] = function() {\n\t        /**\n\t         * For CSS Gradients syntax, please see:\n\t         * webkit.org/blog/175/introducing-css-gradients/\n\t         * developer.mozilla.org/en/CSS/-moz-linear-gradient\n\t         * developer.mozilla.org/en/CSS/-moz-radial-gradient\n\t         * dev.w3.org/csswg/css3-images/#gradients-\n\t         */\n\t\n\t        var str1 = 'background-image:',\n\t            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',\n\t            str3 = 'linear-gradient(left top,#9f9, white);';\n\t\n\t        setCss(\n\t             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)\n\t              (str1 + '-webkit- '.split(' ').join(str2 + str1) +\n\t             // standard syntax             // trailing 'background-image:'\n\t              prefixes.join(str3 + str1)).slice(0, -str1.length)\n\t        );\n\t\n\t        return contains(mStyle.backgroundImage, 'gradient');\n\t    };\n\t\n\t\n\t    tests['cssreflections'] = function() {\n\t        return testPropsAll('boxReflect');\n\t    };\n\t\n\t\n\t    tests['csstransforms'] = function() {\n\t        return !!testPropsAll('transform');\n\t    };\n\t\n\t\n\t    tests['csstransforms3d'] = function() {\n\t\n\t        var ret = !!testPropsAll('perspective');\n\t\n\t        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n\t        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n\t        //   some conditions. As a result, Webkit typically recognizes the syntax but\n\t        //   will sometimes throw a false positive, thus we must do a more thorough check:\n\t        if ( ret && 'webkitPerspective' in docElement.style ) {\n\t\n\t          // Webkit allows this media query to succeed only if the feature is enabled.\n\t          // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n\t          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {\n\t            ret = node.offsetLeft === 9 && node.offsetHeight === 3;\n\t          });\n\t        }\n\t        return ret;\n\t    };\n\t\n\t\n\t    tests['csstransitions'] = function() {\n\t        return testPropsAll('transition');\n\t    };\n\t\n\t\n\t    /*>>fontface*/\n\t    // @font-face detection routine by Diego Perini\n\t    // javascript.nwbox.com/CSSSupport/\n\t\n\t    // false positives:\n\t    //   WebOS github.com/Modernizr/Modernizr/issues/342\n\t    //   WP7   github.com/Modernizr/Modernizr/issues/538\n\t    tests['fontface'] = function() {\n\t        var bool;\n\t\n\t        injectElementWithStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {\n\t          var style = document.getElementById('smodernizr'),\n\t              sheet = style.sheet || style.styleSheet,\n\t              cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\n\t\n\t          bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;\n\t        });\n\t\n\t        return bool;\n\t    };\n\t    /*>>fontface*/\n\t\n\t    // CSS generated content detection\n\t    tests['generatedcontent'] = function() {\n\t        var bool;\n\t\n\t        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:\"',smile,'\";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {\n\t          bool = node.offsetHeight >= 3;\n\t        });\n\t\n\t        return bool;\n\t    };\n\t\n\t\n\t\n\t    // These tests evaluate support of the video/audio elements, as well as\n\t    // testing what types of content they support.\n\t    //\n\t    // We're using the Boolean constructor here, so that we can extend the value\n\t    // e.g.  Modernizr.video     // true\n\t    //       Modernizr.video.ogg // 'probably'\n\t    //\n\t    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n\t    //                     thx to NielsLeenheer and zcorpan\n\t\n\t    // Note: in some older browsers, \"no\" was a return value instead of empty string.\n\t    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n\t    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n\t\n\t    tests['video'] = function() {\n\t        var elem = document.createElement('video'),\n\t            bool = false;\n\t\n\t        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n\t        try {\n\t            if ( bool = !!elem.canPlayType ) {\n\t                bool      = new Boolean(bool);\n\t                bool.ogg  = elem.canPlayType('video/ogg; codecs=\"theora\"')      .replace(/^no$/,'');\n\t\n\t                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n\t                bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"') .replace(/^no$/,'');\n\t\n\t                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');\n\t            }\n\t\n\t        } catch(e) { }\n\t\n\t        return bool;\n\t    };\n\t\n\t    tests['audio'] = function() {\n\t        var elem = document.createElement('audio'),\n\t            bool = false;\n\t\n\t        try {\n\t            if ( bool = !!elem.canPlayType ) {\n\t                bool      = new Boolean(bool);\n\t                bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\n\t                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');\n\t\n\t                // Mimetypes accepted:\n\t                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n\t                //   bit.ly/iphoneoscodecs\n\t                bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');\n\t                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||\n\t                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');\n\t            }\n\t        } catch(e) { }\n\t\n\t        return bool;\n\t    };\n\t\n\t\n\t    // In FF4, if disabled, window.localStorage should === null.\n\t\n\t    // Normally, we could not test that directly and need to do a\n\t    //   `('localStorage' in window) && ` test first because otherwise Firefox will\n\t    //   throw bugzil.la/365772 if cookies are disabled\n\t\n\t    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\n\t    // will throw the exception:\n\t    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.\n\t    // Peculiarly, getItem and removeItem calls do not throw.\n\t\n\t    // Because we are forced to try/catch this, we'll go aggressive.\n\t\n\t    // Just FWIW: IE8 Compat mode supports these features completely:\n\t    //   www.quirksmode.org/dom/html5.html\n\t    // But IE8 doesn't support either with local files\n\t\n\t    tests['localstorage'] = function() {\n\t        try {\n\t            localStorage.setItem(mod, mod);\n\t            localStorage.removeItem(mod);\n\t            return true;\n\t        } catch(e) {\n\t            return false;\n\t        }\n\t    };\n\t\n\t    tests['sessionstorage'] = function() {\n\t        try {\n\t            sessionStorage.setItem(mod, mod);\n\t            sessionStorage.removeItem(mod);\n\t            return true;\n\t        } catch(e) {\n\t            return false;\n\t        }\n\t    };\n\t\n\t\n\t    tests['webworkers'] = function() {\n\t        return !!window.Worker;\n\t    };\n\t\n\t\n\t    tests['applicationcache'] = function() {\n\t        return !!window.applicationCache;\n\t    };\n\t\n\t\n\t    // Thanks to Erik Dahlstrom\n\t    tests['svg'] = function() {\n\t        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;\n\t    };\n\t\n\t    // specifically for SVG inline in HTML, not within XHTML\n\t    // test page: paulirish.com/demo/inline-svg\n\t    tests['inlinesvg'] = function() {\n\t      var div = document.createElement('div');\n\t      div.innerHTML = '<svg/>';\n\t      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\n\t    };\n\t\n\t    // SVG SMIL animation\n\t    tests['smil'] = function() {\n\t        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));\n\t    };\n\t\n\t    // This test is only for clip paths in SVG proper, not clip paths on HTML content\n\t    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\n\t\n\t    // However read the comments to dig into applying SVG clippaths to HTML content here:\n\t    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491\n\t    tests['svgclippaths'] = function() {\n\t        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));\n\t    };\n\t\n\t    /*>>webforms*/\n\t    // input features and input types go directly onto the ret object, bypassing the tests loop.\n\t    // Hold this guy to execute in a moment.\n\t    function webforms() {\n\t        /*>>input*/\n\t        // Run through HTML5's new input attributes to see if the UA understands any.\n\t        // We're using f which is the <input> element created early on\n\t        // Mike Taylr has created a comprehensive resource for testing these attributes\n\t        //   when applied to all input types:\n\t        //   miketaylr.com/code/input-type-attr.html\n\t        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n\t\n\t        // Only input placeholder is tested while textarea's placeholder is not.\n\t        // Currently Safari 4 and Opera 11 have support only for the input placeholder\n\t        // Both tests are available in feature-detects/forms-placeholder.js\n\t        Modernizr['input'] = (function( props ) {\n\t            for ( var i = 0, len = props.length; i < len; i++ ) {\n\t                attrs[ props[i] ] = !!(props[i] in inputElem);\n\t            }\n\t            if (attrs.list){\n\t              // safari false positive's on datalist: webk.it/74252\n\t              // see also github.com/Modernizr/Modernizr/issues/146\n\t              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);\n\t            }\n\t            return attrs;\n\t        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));\n\t        /*>>input*/\n\t\n\t        /*>>inputtypes*/\n\t        // Run through HTML5's new input types to see if the UA understands any.\n\t        //   This is put behind the tests runloop because it doesn't return a\n\t        //   true/false like all the other tests; instead, it returns an object\n\t        //   containing each input type with its corresponding true/false value\n\t\n\t        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\n\t        Modernizr['inputtypes'] = (function(props) {\n\t\n\t            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {\n\t\n\t                inputElem.setAttribute('type', inputElemType = props[i]);\n\t                bool = inputElem.type !== 'text';\n\t\n\t                // We first check to see if the type we give it sticks..\n\t                // If the type does, we feed it a textual value, which shouldn't be valid.\n\t                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n\t                if ( bool ) {\n\t\n\t                    inputElem.value         = smile;\n\t                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';\n\t\n\t                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\n\t\n\t                      docElement.appendChild(inputElem);\n\t                      defaultView = document.defaultView;\n\t\n\t                      // Safari 2-4 allows the smiley as a value, despite making a slider\n\t                      bool =  defaultView.getComputedStyle &&\n\t                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\n\t                              // Mobile android web browser has false positive, so must\n\t                              // check the height to see if the widget is actually there.\n\t                              (inputElem.offsetHeight !== 0);\n\t\n\t                      docElement.removeChild(inputElem);\n\t\n\t                    } else if ( /^(search|tel)$/.test(inputElemType) ){\n\t                      // Spec doesn't define any special parsing or detectable UI\n\t                      //   behaviors so we pass these through as true\n\t\n\t                      // Interestingly, opera fails the earlier test, so it doesn't\n\t                      //  even make it here.\n\t\n\t                    } else if ( /^(url|email)$/.test(inputElemType) ) {\n\t                      // Real url and email support comes with prebaked validation.\n\t                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n\t\n\t                    } else {\n\t                      // If the upgraded input compontent rejects the :) text, we got a winner\n\t                      bool = inputElem.value != smile;\n\t                    }\n\t                }\n\t\n\t                inputs[ props[i] ] = !!bool;\n\t            }\n\t            return inputs;\n\t        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));\n\t        /*>>inputtypes*/\n\t    }\n\t    /*>>webforms*/\n\t\n\t\n\t    // End of test definitions\n\t    // -----------------------\n\t\n\t\n\t\n\t    // Run through all tests and detect their support in the current UA.\n\t    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\n\t    for ( var feature in tests ) {\n\t        if ( hasOwnProp(tests, feature) ) {\n\t            // run the test, throw the return value into the Modernizr,\n\t            //   then based on that boolean, define an appropriate className\n\t            //   and push it into an array of classes we'll join later.\n\t            featureName  = feature.toLowerCase();\n\t            Modernizr[featureName] = tests[feature]();\n\t\n\t            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\n\t        }\n\t    }\n\t\n\t    /*>>webforms*/\n\t    // input tests need to run.\n\t    Modernizr.input || webforms();\n\t    /*>>webforms*/\n\t\n\t\n\t    /**\n\t     * addTest allows the user to define their own feature tests\n\t     * the result will be added onto the Modernizr object,\n\t     * as well as an appropriate className set on the html element\n\t     *\n\t     * @param feature - String naming the feature\n\t     * @param test - Function returning true if feature is supported, false if not\n\t     */\n\t     Modernizr.addTest = function ( feature, test ) {\n\t       if ( typeof feature == 'object' ) {\n\t         for ( var key in feature ) {\n\t           if ( hasOwnProp( feature, key ) ) {\n\t             Modernizr.addTest( key, feature[ key ] );\n\t           }\n\t         }\n\t       } else {\n\t\n\t         feature = feature.toLowerCase();\n\t\n\t         if ( Modernizr[feature] !== undefined ) {\n\t           // we're going to quit if you're trying to overwrite an existing test\n\t           // if we were to allow it, we'd do this:\n\t           //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n\t           //   docElement.className = docElement.className.replace( re, '' );\n\t           // but, no rly, stuff 'em.\n\t           return Modernizr;\n\t         }\n\t\n\t         test = typeof test == 'function' ? test() : test;\n\t\n\t         if (typeof enableClasses !== \"undefined\" && enableClasses) {\n\t           docElement.className += ' ' + (test ? '' : 'no-') + feature;\n\t         }\n\t         Modernizr[feature] = test;\n\t\n\t       }\n\t\n\t       return Modernizr; // allow chaining.\n\t     };\n\t\n\t\n\t    // Reset modElem.cssText to nothing to reduce memory footprint.\n\t    setCss('');\n\t    modElem = inputElem = null;\n\t\n\t    /*>>shiv*/\n\t    /*! HTML5 Shiv v3.6.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */\n\t    ;(function(window, document) {\n\t    /*jshint evil:true */\n\t      /** Preset options */\n\t      var options = window.html5 || {};\n\t\n\t      /** Used to skip problem elements */\n\t      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\t\n\t      /** Not all elements can be cloned in IE **/\n\t      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\t\n\t      /** Detect whether the browser supports default html5 styles */\n\t      var supportsHtml5Styles;\n\t\n\t      /** Name of the expando, to work with multiple documents or to re-shiv one document */\n\t      var expando = '_html5shiv';\n\t\n\t      /** The id for the the documents expando */\n\t      var expanID = 0;\n\t\n\t      /** Cached data for each document */\n\t      var expandoData = {};\n\t\n\t      /** Detect whether the browser supports unknown elements */\n\t      var supportsUnknownElements;\n\t\n\t      (function() {\n\t        try {\n\t            var a = document.createElement('a');\n\t            a.innerHTML = '<xyz></xyz>';\n\t            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n\t            supportsHtml5Styles = ('hidden' in a);\n\t\n\t            supportsUnknownElements = a.childNodes.length == 1 || (function() {\n\t              // assign a false positive if unable to shiv\n\t              (document.createElement)('a');\n\t              var frag = document.createDocumentFragment();\n\t              return (\n\t                typeof frag.cloneNode == 'undefined' ||\n\t                typeof frag.createDocumentFragment == 'undefined' ||\n\t                typeof frag.createElement == 'undefined'\n\t              );\n\t            }());\n\t        } catch(e) {\n\t          supportsHtml5Styles = true;\n\t          supportsUnknownElements = true;\n\t        }\n\t\n\t      }());\n\t\n\t      /*--------------------------------------------------------------------------*/\n\t\n\t      /**\n\t       * Creates a style sheet with the given CSS text and adds it to the document.\n\t       * @private\n\t       * @param {Document} ownerDocument The document.\n\t       * @param {String} cssText The CSS text.\n\t       * @returns {StyleSheet} The style element.\n\t       */\n\t      function addStyleSheet(ownerDocument, cssText) {\n\t        var p = ownerDocument.createElement('p'),\n\t            parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\t\n\t        p.innerHTML = 'x<style>' + cssText + '</style>';\n\t        return parent.insertBefore(p.lastChild, parent.firstChild);\n\t      }\n\t\n\t      /**\n\t       * Returns the value of `html5.elements` as an array.\n\t       * @private\n\t       * @returns {Array} An array of shived element node names.\n\t       */\n\t      function getElements() {\n\t        var elements = html5.elements;\n\t        return typeof elements == 'string' ? elements.split(' ') : elements;\n\t      }\n\t\n\t        /**\n\t       * Returns the data associated to the given document\n\t       * @private\n\t       * @param {Document} ownerDocument The document.\n\t       * @returns {Object} An object of data.\n\t       */\n\t      function getExpandoData(ownerDocument) {\n\t        var data = expandoData[ownerDocument[expando]];\n\t        if (!data) {\n\t            data = {};\n\t            expanID++;\n\t            ownerDocument[expando] = expanID;\n\t            expandoData[expanID] = data;\n\t        }\n\t        return data;\n\t      }\n\t\n\t      /**\n\t       * returns a shived element for the given nodeName and document\n\t       * @memberOf html5\n\t       * @param {String} nodeName name of the element\n\t       * @param {Document} ownerDocument The context document.\n\t       * @returns {Object} The shived element.\n\t       */\n\t      function createElement(nodeName, ownerDocument, data){\n\t        if (!ownerDocument) {\n\t            ownerDocument = document;\n\t        }\n\t        if(supportsUnknownElements){\n\t            return ownerDocument.createElement(nodeName);\n\t        }\n\t        if (!data) {\n\t            data = getExpandoData(ownerDocument);\n\t        }\n\t        var node;\n\t\n\t        if (data.cache[nodeName]) {\n\t            node = data.cache[nodeName].cloneNode();\n\t        } else if (saveClones.test(nodeName)) {\n\t            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n\t        } else {\n\t            node = data.createElem(nodeName);\n\t        }\n\t\n\t        // Avoid adding some elements to fragments in IE < 9 because\n\t        // * Attributes like `name` or `type` cannot be set/changed once an element\n\t        //   is inserted into a document/fragment\n\t        // * Link elements with `src` attributes that are inaccessible, as with\n\t        //   a 403 response, will cause the tab/window to crash\n\t        // * Script elements appended to fragments will execute when their `src`\n\t        //   or `text` property is set\n\t        return node.canHaveChildren && !reSkip.test(nodeName) ? data.frag.appendChild(node) : node;\n\t      }\n\t\n\t      /**\n\t       * returns a shived DocumentFragment for the given document\n\t       * @memberOf html5\n\t       * @param {Document} ownerDocument The context document.\n\t       * @returns {Object} The shived DocumentFragment.\n\t       */\n\t      function createDocumentFragment(ownerDocument, data){\n\t        if (!ownerDocument) {\n\t            ownerDocument = document;\n\t        }\n\t        if(supportsUnknownElements){\n\t            return ownerDocument.createDocumentFragment();\n\t        }\n\t        data = data || getExpandoData(ownerDocument);\n\t        var clone = data.frag.cloneNode(),\n\t            i = 0,\n\t            elems = getElements(),\n\t            l = elems.length;\n\t        for(;i<l;i++){\n\t            clone.createElement(elems[i]);\n\t        }\n\t        return clone;\n\t      }\n\t\n\t      /**\n\t       * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n\t       * @private\n\t       * @param {Document|DocumentFragment} ownerDocument The document.\n\t       * @param {Object} data of the document.\n\t       */\n\t      function shivMethods(ownerDocument, data) {\n\t        if (!data.cache) {\n\t            data.cache = {};\n\t            data.createElem = ownerDocument.createElement;\n\t            data.createFrag = ownerDocument.createDocumentFragment;\n\t            data.frag = data.createFrag();\n\t        }\n\t\n\t\n\t        ownerDocument.createElement = function(nodeName) {\n\t          //abort shiv\n\t          if (!html5.shivMethods) {\n\t              return data.createElem(nodeName);\n\t          }\n\t          return createElement(nodeName, ownerDocument, data);\n\t        };\n\t\n\t        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n\t          'var n=f.cloneNode(),c=n.createElement;' +\n\t          'h.shivMethods&&(' +\n\t            // unroll the `createElement` calls\n\t            getElements().join().replace(/\\w+/g, function(nodeName) {\n\t              data.createElem(nodeName);\n\t              data.frag.createElement(nodeName);\n\t              return 'c(\"' + nodeName + '\")';\n\t            }) +\n\t          ');return n}'\n\t        )(html5, data.frag);\n\t      }\n\t\n\t      /*--------------------------------------------------------------------------*/\n\t\n\t      /**\n\t       * Shivs the given document.\n\t       * @memberOf html5\n\t       * @param {Document} ownerDocument The document to shiv.\n\t       * @returns {Document} The shived document.\n\t       */\n\t      function shivDocument(ownerDocument) {\n\t        if (!ownerDocument) {\n\t            ownerDocument = document;\n\t        }\n\t        var data = getExpandoData(ownerDocument);\n\t\n\t        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n\t          data.hasCSS = !!addStyleSheet(ownerDocument,\n\t            // corrects block display not defined in IE6/7/8/9\n\t            'article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +\n\t            // adds styling not present in IE6/7/8/9\n\t            'mark{background:#FF0;color:#000}'\n\t          );\n\t        }\n\t        if (!supportsUnknownElements) {\n\t          shivMethods(ownerDocument, data);\n\t        }\n\t        return ownerDocument;\n\t      }\n\t\n\t      /*--------------------------------------------------------------------------*/\n\t\n\t      /**\n\t       * The `html5` object is exposed so that more elements can be shived and\n\t       * existing shiving can be detected on iframes.\n\t       * @type Object\n\t       * @example\n\t       *\n\t       * // options can be changed before the script is included\n\t       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n\t       */\n\t      var html5 = {\n\t\n\t        /**\n\t         * An array or space separated string of node names of the elements to shiv.\n\t         * @memberOf html5\n\t         * @type Array|String\n\t         */\n\t        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',\n\t\n\t        /**\n\t         * A flag to indicate that the HTML5 style sheet should be inserted.\n\t         * @memberOf html5\n\t         * @type Boolean\n\t         */\n\t        'shivCSS': (options.shivCSS !== false),\n\t\n\t        /**\n\t         * Is equal to true if a browser supports creating unknown/HTML5 elements\n\t         * @memberOf html5\n\t         * @type boolean\n\t         */\n\t        'supportsUnknownElements': supportsUnknownElements,\n\t\n\t        /**\n\t         * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n\t         * methods should be overwritten.\n\t         * @memberOf html5\n\t         * @type Boolean\n\t         */\n\t        'shivMethods': (options.shivMethods !== false),\n\t\n\t        /**\n\t         * A string to describe the type of `html5` object (\"default\" or \"default print\").\n\t         * @memberOf html5\n\t         * @type String\n\t         */\n\t        'type': 'default',\n\t\n\t        // shivs the document according to the specified `html5` object options\n\t        'shivDocument': shivDocument,\n\t\n\t        //creates a shived element\n\t        createElement: createElement,\n\t\n\t        //creates a shived documentFragment\n\t        createDocumentFragment: createDocumentFragment\n\t      };\n\t\n\t      /*--------------------------------------------------------------------------*/\n\t\n\t      // expose html5\n\t      window.html5 = html5;\n\t\n\t      // shiv the document\n\t      shivDocument(document);\n\t\n\t    }(this, document));\n\t    /*>>shiv*/\n\t\n\t    // Assign private properties to the return object with prefix\n\t    Modernizr._version      = version;\n\t\n\t    // expose these for the plugin API. Look in the source for how to join() them against your input\n\t    /*>>prefixes*/\n\t    Modernizr._prefixes     = prefixes;\n\t    /*>>prefixes*/\n\t    /*>>domprefixes*/\n\t    Modernizr._domPrefixes  = domPrefixes;\n\t    Modernizr._cssomPrefixes  = cssomPrefixes;\n\t    /*>>domprefixes*/\n\t\n\t    /*>>mq*/\n\t    // Modernizr.mq tests a given media query, live against the current state of the window\n\t    // A few important notes:\n\t    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\n\t    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\n\t    //   * You must specify values. Eg. If you are testing support for the min-width media query use:\n\t    //       Modernizr.mq('(min-width:0)')\n\t    // usage:\n\t    // Modernizr.mq('only screen and (max-width:768)')\n\t    Modernizr.mq            = testMediaQuery;\n\t    /*>>mq*/\n\t\n\t    /*>>hasevent*/\n\t    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n\t    // Modernizr.hasEvent('gesturestart', elem)\n\t    Modernizr.hasEvent      = isEventSupported;\n\t    /*>>hasevent*/\n\t\n\t    /*>>testprop*/\n\t    // Modernizr.testProp() investigates whether a given style property is recognized\n\t    // Note that the property names must be provided in the camelCase variant.\n\t    // Modernizr.testProp('pointerEvents')\n\t    Modernizr.testProp      = function(prop){\n\t        return testProps([prop]);\n\t    };\n\t    /*>>testprop*/\n\t\n\t    /*>>testallprops*/\n\t    // Modernizr.testAllProps() investigates whether a given style property,\n\t    //   or any of its vendor-prefixed variants, is recognized\n\t    // Note that the property names must be provided in the camelCase variant.\n\t    // Modernizr.testAllProps('boxSizing')\n\t    Modernizr.testAllProps  = testPropsAll;\n\t    /*>>testallprops*/\n\t\n\t\n\t    /*>>teststyles*/\n\t    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\n\t    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\n\t    Modernizr.testStyles    = injectElementWithStyles;\n\t    /*>>teststyles*/\n\t\n\t\n\t    /*>>prefixed*/\n\t    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n\t    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n\t\n\t    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\n\t    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\n\t    //\n\t    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\n\t\n\t    // If you're trying to ascertain which transition end event to bind to, you might do something like...\n\t    //\n\t    //     var transEndEventNames = {\n\t    //       'WebkitTransition' : 'webkitTransitionEnd',\n\t    //       'MozTransition'    : 'transitionend',\n\t    //       'OTransition'      : 'oTransitionEnd',\n\t    //       'msTransition'     : 'MSTransitionEnd',\n\t    //       'transition'       : 'transitionend'\n\t    //     },\n\t    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n\t\n\t    Modernizr.prefixed      = function(prop, obj, elem){\n\t      if(!obj) {\n\t        return testPropsAll(prop, 'pfx');\n\t      } else {\n\t        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n\t        return testPropsAll(prop, obj, elem);\n\t      }\n\t    };\n\t    /*>>prefixed*/\n\t\n\t\n\t    /*>>cssclasses*/\n\t    // Remove \"no-js\" class from <html> element, if it exists:\n\t    docElement.className = docElement.className.replace(/(^|\\s)no-js(\\s|$)/, '$1$2') +\n\t\n\t                            // Add the new classes to the <html> element.\n\t                            (enableClasses ? ' js ' + classes.join(' ') : '');\n\t    /*>>cssclasses*/\n\t\n\t    return Modernizr;\n\t\n\t})(this, this.document);\n\t\n\t\n\t/*** EXPORTS FROM exports-loader ***/\n\tmodule.exports = window.Modernizr}.call(window));\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = noisy;\n\n/***/ }\n/******/ ])\n\n\n/** WEBPACK FOOTER **\n ** 8c4d7655721756eaafce.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8c4d7655721756eaafce\n **/","Modernizr = require 'Modernizr'\n\nAudioContext = Modernizr.prefixed 'AudioContext', window\ncontext = new AudioContext()\n\nSelfHypnosis2 = (require './index').presets.SelfHypnosis2\nplayer = new SelfHypnosis2 context\n\nif module.hot\n  module.hot.accept './index', ->\n    player.stop()\n    SelfHypnosis2 = (require './index').presets.SelfHypnosis2\n    player = new SelfHypnosis2 context\n    player.play()\n\n  module.hot.accept()\n\n  module.hot.dispose (data) ->\n    player.stop()\n    data.time = player.time\n\n  if module.hot.data\n    player.time = module.hot.data.time\n\nplayer.play()\n\n# in Chrome 39, you must store a reference to this object or the modulators will\n# get garbage collected and stop modulating. This does not happen in when using\n# webpack-dev-server because the module hot swapping code will hold a reference\n# to the current player object to prevent collection.\nwindow.player = player\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/demo.coffee\n **/","/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/*!\n * Modernizr v2.6.3\n * www.modernizr.com\n *\n * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\n * Available under the BSD and MIT licenses: www.modernizr.com/license/\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in\n * the current UA and makes the results available to you in two ways:\n * as properties on a global Modernizr object, and as classes on the\n * <html> element. This information allows you to progressively enhance\n * your pages with a granular level of control over the experience.\n *\n * Modernizr has an optional (not included) conditional resource loader\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n * To get a build that includes Modernizr.load(), as well as choosing\n * which tests to include, go to www.modernizr.com/download/\n *\n * Authors        Faruk Ates, Paul Irish, Alex Sexton\n * Contributors   Ryan Seddon, Ben Alman\n */\n\nwindow.Modernizr = (function( window, document, undefined ) {\n\n    var version = '2.6.3',\n\n    Modernizr = {},\n\n    /*>>cssclasses*/\n    // option for enabling the HTML classes to be added\n    enableClasses = true,\n    /*>>cssclasses*/\n\n    docElement = document.documentElement,\n\n    /**\n     * Create our \"modernizr\" element that we do most feature tests on.\n     */\n    mod = 'modernizr',\n    modElem = document.createElement(mod),\n    mStyle = modElem.style,\n\n    /**\n     * Create the input element for various Web Forms feature tests.\n     */\n    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,\n\n    /*>>smile*/\n    smile = ':)',\n    /*>>smile*/\n\n    toString = {}.toString,\n\n    // TODO :: make the prefixes more granular\n    /*>>prefixes*/\n    // List of property values to set for css tests. See ticket #21\n    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),\n    /*>>prefixes*/\n\n    /*>>domprefixes*/\n    // Following spec is to expose vendor-specific style properties as:\n    //   elem.style.WebkitBorderRadius\n    // and the following would be incorrect:\n    //   elem.style.webkitBorderRadius\n\n    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n    //   erik.eae.net/archives/2008/03/10/21.48.10/\n\n    // More here: github.com/Modernizr/Modernizr/issues/issue/21\n    omPrefixes = 'Webkit Moz O ms',\n\n    cssomPrefixes = omPrefixes.split(' '),\n\n    domPrefixes = omPrefixes.toLowerCase().split(' '),\n    /*>>domprefixes*/\n\n    /*>>ns*/\n    ns = {'svg': 'http://www.w3.org/2000/svg'},\n    /*>>ns*/\n\n    tests = {},\n    inputs = {},\n    attrs = {},\n\n    classes = [],\n\n    slice = classes.slice,\n\n    featureName, // used in testing loop\n\n\n    /*>>teststyles*/\n    // Inject element with style element and some CSS rules\n    injectElementWithStyles = function( rule, callback, nodes, testnames ) {\n\n      var style, ret, node, docOverflow,\n          div = document.createElement('div'),\n          // After page load injecting a fake body doesn't work so check if body exists\n          body = document.body,\n          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.\n          fakeBody = body || document.createElement('body');\n\n      if ( parseInt(nodes, 10) ) {\n          // In order not to give false positives we create a node for each test\n          // This also allows the method to scale for unspecified uses\n          while ( nodes-- ) {\n              node = document.createElement('div');\n              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n              div.appendChild(node);\n          }\n      }\n\n      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\n      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\n      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\n      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\n      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277\n      style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');\n      div.id = mod;\n      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n      (body ? div : fakeBody).innerHTML += style;\n      fakeBody.appendChild(div);\n      if ( !body ) {\n          //avoid crashing IE8, if background image is used\n          fakeBody.style.background = '';\n          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n          fakeBody.style.overflow = 'hidden';\n          docOverflow = docElement.style.overflow;\n          docElement.style.overflow = 'hidden';\n          docElement.appendChild(fakeBody);\n      }\n\n      ret = callback(div, rule);\n      // If this is done after page load we don't want to remove the body so check if body exists\n      if ( !body ) {\n          fakeBody.parentNode.removeChild(fakeBody);\n          docElement.style.overflow = docOverflow;\n      } else {\n          div.parentNode.removeChild(div);\n      }\n\n      return !!ret;\n\n    },\n    /*>>teststyles*/\n\n    /*>>mq*/\n    // adapted from matchMedia polyfill\n    // by Scott Jehl and Paul Irish\n    // gist.github.com/786768\n    testMediaQuery = function( mq ) {\n\n      var matchMedia = window.matchMedia || window.msMatchMedia;\n      if ( matchMedia ) {\n        return matchMedia(mq).matches;\n      }\n\n      var bool;\n\n      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {\n        bool = (window.getComputedStyle ?\n                  getComputedStyle(node, null) :\n                  node.currentStyle)['position'] == 'absolute';\n      });\n\n      return bool;\n\n     },\n     /*>>mq*/\n\n\n    /*>>hasevent*/\n    //\n    // isEventSupported determines if a given element supports the given event\n    // kangax.github.com/iseventsupported/\n    //\n    // The following results are known incorrects:\n    //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\n    //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\n    //   ...\n    isEventSupported = (function() {\n\n      var TAGNAMES = {\n        'select': 'input', 'change': 'input',\n        'submit': 'form', 'reset': 'form',\n        'error': 'img', 'load': 'img', 'abort': 'img'\n      };\n\n      function isEventSupported( eventName, element ) {\n\n        element = element || document.createElement(TAGNAMES[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\n        var isSupported = eventName in element;\n\n        if ( !isSupported ) {\n          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\n          if ( !element.setAttribute ) {\n            element = document.createElement('div');\n          }\n          if ( element.setAttribute && element.removeAttribute ) {\n            element.setAttribute(eventName, '');\n            isSupported = is(element[eventName], 'function');\n\n            // If property was created, \"remove it\" (by setting value to `undefined`)\n            if ( !is(element[eventName], 'undefined') ) {\n              element[eventName] = undefined;\n            }\n            element.removeAttribute(eventName);\n          }\n        }\n\n        element = null;\n        return isSupported;\n      }\n      return isEventSupported;\n    })(),\n    /*>>hasevent*/\n\n    // TODO :: Add flag for hasownprop ? didn't last time\n\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;\n\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {\n      hasOwnProp = function (object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n\n    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\n    // es5.github.com/#x15.3.4.5\n\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function bind(that) {\n\n        var target = this;\n\n        if (typeof target != \"function\") {\n            throw new TypeError();\n        }\n\n        var args = slice.call(arguments, 1),\n            bound = function () {\n\n            if (this instanceof bound) {\n\n              var F = function(){};\n              F.prototype = target.prototype;\n              var self = new F();\n\n              var result = target.apply(\n                  self,\n                  args.concat(slice.call(arguments))\n              );\n              if (Object(result) === result) {\n                  return result;\n              }\n              return self;\n\n            } else {\n\n              return target.apply(\n                  that,\n                  args.concat(slice.call(arguments))\n              );\n\n            }\n\n        };\n\n        return bound;\n      };\n    }\n\n    /**\n     * setCss applies given styles to the Modernizr DOM node.\n     */\n    function setCss( str ) {\n        mStyle.cssText = str;\n    }\n\n    /**\n     * setCssAll extrapolates all vendor-specific css strings.\n     */\n    function setCssAll( str1, str2 ) {\n        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\n    }\n\n    /**\n     * is returns a boolean for if typeof obj is exactly type.\n     */\n    function is( obj, type ) {\n        return typeof obj === type;\n    }\n\n    /**\n     * contains returns a boolean for if substr is found within str.\n     */\n    function contains( str, substr ) {\n        return !!~('' + str).indexOf(substr);\n    }\n\n    /*>>testprop*/\n\n    // testProps is a generic CSS / DOM property test.\n\n    // In testing support for a given CSS property, it's legit to test:\n    //    `elem.style[styleName] !== undefined`\n    // If the property is supported it will return an empty string,\n    // if unsupported it will return undefined.\n\n    // We'll take advantage of this quick test and skip setting a style\n    // on our modernizr element, but instead just testing undefined vs\n    // empty string.\n\n    // Because the testing of the CSS property names (with \"-\", as\n    // opposed to the camelCase DOM properties) is non-portable and\n    // non-standard but works in WebKit and IE (but not Gecko or Opera),\n    // we explicitly reject properties with dashes so that authors\n    // developing in WebKit or IE first don't end up with\n    // browser-specific content by accident.\n\n    function testProps( props, prefixed ) {\n        for ( var i in props ) {\n            var prop = props[i];\n            if ( !contains(prop, \"-\") && mStyle[prop] !== undefined ) {\n                return prefixed == 'pfx' ? prop : true;\n            }\n        }\n        return false;\n    }\n    /*>>testprop*/\n\n    // TODO :: add testDOMProps\n    /**\n     * testDOMProps is a generic DOM property test; if a browser supports\n     *   a certain property, it won't return undefined for it.\n     */\n    function testDOMProps( props, obj, elem ) {\n        for ( var i in props ) {\n            var item = obj[props[i]];\n            if ( item !== undefined) {\n\n                // return the property name as a string\n                if (elem === false) return props[i];\n\n                // let's bind a function\n                if (is(item, 'function')){\n                  // default to autobind unless override\n                  return item.bind(elem || obj);\n                }\n\n                // return the unbound function or obj or value\n                return item;\n            }\n        }\n        return false;\n    }\n\n    /*>>testallprops*/\n    /**\n     * testPropsAll tests a list of DOM properties we want to check against.\n     *   We specify literally ALL possible (known and/or likely) properties on\n     *   the element including the non-vendor prefixed one, for forward-\n     *   compatibility.\n     */\n    function testPropsAll( prop, prefixed, elem ) {\n\n        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),\n            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n        // did they call .prefixed('boxSizing') or are we just testing a prop?\n        if(is(prefixed, \"string\") || is(prefixed, \"undefined\")) {\n          return testProps(props, prefixed);\n\n        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n        } else {\n          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n          return testDOMProps(props, prefixed, elem);\n        }\n    }\n    /*>>testallprops*/\n\n\n    /**\n     * Tests\n     * -----\n     */\n\n    // The *new* flexbox\n    // dev.w3.org/csswg/css3-flexbox\n\n    tests['flexbox'] = function() {\n      return testPropsAll('flexWrap');\n    };\n\n    // The *old* flexbox\n    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/\n\n    tests['flexboxlegacy'] = function() {\n        return testPropsAll('boxDirection');\n    };\n\n    // On the S60 and BB Storm, getContext exists, but always returns undefined\n    // so we actually have to call getContext() to verify\n    // github.com/Modernizr/Modernizr/issues/issue/97/\n\n    tests['canvas'] = function() {\n        var elem = document.createElement('canvas');\n        return !!(elem.getContext && elem.getContext('2d'));\n    };\n\n    tests['canvastext'] = function() {\n        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));\n    };\n\n    // webk.it/70117 is tracking a legit WebGL feature detect proposal\n\n    // We do a soft detect which may false positive in order to avoid\n    // an expensive context creation: bugzil.la/732441\n\n    tests['webgl'] = function() {\n        return !!window.WebGLRenderingContext;\n    };\n\n    /*\n     * The Modernizr.touch test only indicates if the browser supports\n     *    touch events, which does not necessarily reflect a touchscreen\n     *    device, as evidenced by tablets running Windows 7 or, alas,\n     *    the Palm Pre / WebOS (touch) phones.\n     *\n     * Additionally, Chrome (desktop) used to lie about its support on this,\n     *    but that has since been rectified: crbug.com/36415\n     *\n     * We also test for Firefox 4 Multitouch Support.\n     *\n     * For more info, see: modernizr.github.com/Modernizr/touch.html\n     */\n\n    tests['touch'] = function() {\n        var bool;\n\n        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n          bool = true;\n        } else {\n          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {\n            bool = node.offsetTop === 9;\n          });\n        }\n\n        return bool;\n    };\n\n\n    // geolocation is often considered a trivial feature detect...\n    // Turns out, it's quite tricky to get right:\n    //\n    // Using !!navigator.geolocation does two things we don't want. It:\n    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513\n    //   2. Disables page caching in WebKit: webk.it/43956\n    //\n    // Meanwhile, in Firefox < 8, an about:config setting could expose\n    // a false positive that would throw an exception: bugzil.la/688158\n\n    tests['geolocation'] = function() {\n        return 'geolocation' in navigator;\n    };\n\n\n    tests['postmessage'] = function() {\n      return !!window.postMessage;\n    };\n\n\n    // Chrome incognito mode used to throw an exception when using openDatabase\n    // It doesn't anymore.\n    tests['websqldatabase'] = function() {\n      return !!window.openDatabase;\n    };\n\n    // Vendors had inconsistent prefixing with the experimental Indexed DB:\n    // - Webkit's implementation is accessible through webkitIndexedDB\n    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\n    // For speed, we don't test the legacy (and beta-only) indexedDB\n    tests['indexedDB'] = function() {\n      return !!testPropsAll(\"indexedDB\", window);\n    };\n\n    // documentMode logic from YUI to filter out IE8 Compat Mode\n    //   which false positives.\n    tests['hashchange'] = function() {\n      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);\n    };\n\n    // Per 1.6:\n    // This used to be Modernizr.historymanagement but the longer\n    // name has been deprecated in favor of a shorter and property-matching one.\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n    // and in the first release thereafter disappear entirely.\n    tests['history'] = function() {\n      return !!(window.history && history.pushState);\n    };\n\n    tests['draganddrop'] = function() {\n        var div = document.createElement('div');\n        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);\n    };\n\n    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10\n    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.\n    // FF10 still uses prefixes, so check for it until then.\n    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/\n    tests['websockets'] = function() {\n        return 'WebSocket' in window || 'MozWebSocket' in window;\n    };\n\n\n    // css-tricks.com/rgba-browser-support/\n    tests['rgba'] = function() {\n        // Set an rgba() color and check the returned value\n\n        setCss('background-color:rgba(150,255,150,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba');\n    };\n\n    tests['hsla'] = function() {\n        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\n        //   except IE9 who retains it as hsla\n\n        setCss('background-color:hsla(120,40%,100%,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');\n    };\n\n    tests['multiplebgs'] = function() {\n        // Setting multiple images AND a color on the background shorthand property\n        //  and then querying the style.background property value for the number of\n        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\n\n        setCss('background:url(https://),url(https://),red url(https://)');\n\n        // If the UA supports multiple backgrounds, there should be three occurrences\n        //   of the string \"url(\" in the return value for elemStyle.background\n\n        return (/(url\\s*\\(.*?){3}/).test(mStyle.background);\n    };\n\n\n\n    // this will false positive in Opera Mini\n    //   github.com/Modernizr/Modernizr/issues/396\n\n    tests['backgroundsize'] = function() {\n        return testPropsAll('backgroundSize');\n    };\n\n    tests['borderimage'] = function() {\n        return testPropsAll('borderImage');\n    };\n\n\n    // Super comprehensive table about all the unique implementations of\n    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance\n\n    tests['borderradius'] = function() {\n        return testPropsAll('borderRadius');\n    };\n\n    // WebOS unfortunately false positives on this test.\n    tests['boxshadow'] = function() {\n        return testPropsAll('boxShadow');\n    };\n\n    // FF3.0 will false positive on this test\n    tests['textshadow'] = function() {\n        return document.createElement('div').style.textShadow === '';\n    };\n\n\n    tests['opacity'] = function() {\n        // Browsers that actually have CSS Opacity implemented have done so\n        //  according to spec, which means their return values are within the\n        //  range of [0.0,1.0] - including the leading zero.\n\n        setCssAll('opacity:.55');\n\n        // The non-literal . in this regex is intentional:\n        //   German Chrome returns this value as 0,55\n        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n        return (/^0.55$/).test(mStyle.opacity);\n    };\n\n\n    // Note, Android < 4 will pass this test, but can only animate\n    //   a single property at a time\n    //   daneden.me/2011/12/putting-up-with-androids-bullshit/\n    tests['cssanimations'] = function() {\n        return testPropsAll('animationName');\n    };\n\n\n    tests['csscolumns'] = function() {\n        return testPropsAll('columnCount');\n    };\n\n\n    tests['cssgradients'] = function() {\n        /**\n         * For CSS Gradients syntax, please see:\n         * webkit.org/blog/175/introducing-css-gradients/\n         * developer.mozilla.org/en/CSS/-moz-linear-gradient\n         * developer.mozilla.org/en/CSS/-moz-radial-gradient\n         * dev.w3.org/csswg/css3-images/#gradients-\n         */\n\n        var str1 = 'background-image:',\n            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',\n            str3 = 'linear-gradient(left top,#9f9, white);';\n\n        setCss(\n             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)\n              (str1 + '-webkit- '.split(' ').join(str2 + str1) +\n             // standard syntax             // trailing 'background-image:'\n              prefixes.join(str3 + str1)).slice(0, -str1.length)\n        );\n\n        return contains(mStyle.backgroundImage, 'gradient');\n    };\n\n\n    tests['cssreflections'] = function() {\n        return testPropsAll('boxReflect');\n    };\n\n\n    tests['csstransforms'] = function() {\n        return !!testPropsAll('transform');\n    };\n\n\n    tests['csstransforms3d'] = function() {\n\n        var ret = !!testPropsAll('perspective');\n\n        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n        //   some conditions. As a result, Webkit typically recognizes the syntax but\n        //   will sometimes throw a false positive, thus we must do a more thorough check:\n        if ( ret && 'webkitPerspective' in docElement.style ) {\n\n          // Webkit allows this media query to succeed only if the feature is enabled.\n          // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {\n            ret = node.offsetLeft === 9 && node.offsetHeight === 3;\n          });\n        }\n        return ret;\n    };\n\n\n    tests['csstransitions'] = function() {\n        return testPropsAll('transition');\n    };\n\n\n    /*>>fontface*/\n    // @font-face detection routine by Diego Perini\n    // javascript.nwbox.com/CSSSupport/\n\n    // false positives:\n    //   WebOS github.com/Modernizr/Modernizr/issues/342\n    //   WP7   github.com/Modernizr/Modernizr/issues/538\n    tests['fontface'] = function() {\n        var bool;\n\n        injectElementWithStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {\n          var style = document.getElementById('smodernizr'),\n              sheet = style.sheet || style.styleSheet,\n              cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\n\n          bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;\n        });\n\n        return bool;\n    };\n    /*>>fontface*/\n\n    // CSS generated content detection\n    tests['generatedcontent'] = function() {\n        var bool;\n\n        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:\"',smile,'\";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {\n          bool = node.offsetHeight >= 3;\n        });\n\n        return bool;\n    };\n\n\n\n    // These tests evaluate support of the video/audio elements, as well as\n    // testing what types of content they support.\n    //\n    // We're using the Boolean constructor here, so that we can extend the value\n    // e.g.  Modernizr.video     // true\n    //       Modernizr.video.ogg // 'probably'\n    //\n    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n    //                     thx to NielsLeenheer and zcorpan\n\n    // Note: in some older browsers, \"no\" was a return value instead of empty string.\n    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n\n    tests['video'] = function() {\n        var elem = document.createElement('video'),\n            bool = false;\n\n        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('video/ogg; codecs=\"theora\"')      .replace(/^no$/,'');\n\n                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n                bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"') .replace(/^no$/,'');\n\n                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');\n            }\n\n        } catch(e) { }\n\n        return bool;\n    };\n\n    tests['audio'] = function() {\n        var elem = document.createElement('audio'),\n            bool = false;\n\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\n                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');\n\n                // Mimetypes accepted:\n                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n                //   bit.ly/iphoneoscodecs\n                bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');\n                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||\n                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');\n            }\n        } catch(e) { }\n\n        return bool;\n    };\n\n\n    // In FF4, if disabled, window.localStorage should === null.\n\n    // Normally, we could not test that directly and need to do a\n    //   `('localStorage' in window) && ` test first because otherwise Firefox will\n    //   throw bugzil.la/365772 if cookies are disabled\n\n    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\n    // will throw the exception:\n    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.\n    // Peculiarly, getItem and removeItem calls do not throw.\n\n    // Because we are forced to try/catch this, we'll go aggressive.\n\n    // Just FWIW: IE8 Compat mode supports these features completely:\n    //   www.quirksmode.org/dom/html5.html\n    // But IE8 doesn't support either with local files\n\n    tests['localstorage'] = function() {\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    tests['sessionstorage'] = function() {\n        try {\n            sessionStorage.setItem(mod, mod);\n            sessionStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n\n    tests['webworkers'] = function() {\n        return !!window.Worker;\n    };\n\n\n    tests['applicationcache'] = function() {\n        return !!window.applicationCache;\n    };\n\n\n    // Thanks to Erik Dahlstrom\n    tests['svg'] = function() {\n        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;\n    };\n\n    // specifically for SVG inline in HTML, not within XHTML\n    // test page: paulirish.com/demo/inline-svg\n    tests['inlinesvg'] = function() {\n      var div = document.createElement('div');\n      div.innerHTML = '<svg/>';\n      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\n    };\n\n    // SVG SMIL animation\n    tests['smil'] = function() {\n        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));\n    };\n\n    // This test is only for clip paths in SVG proper, not clip paths on HTML content\n    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\n\n    // However read the comments to dig into applying SVG clippaths to HTML content here:\n    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491\n    tests['svgclippaths'] = function() {\n        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));\n    };\n\n    /*>>webforms*/\n    // input features and input types go directly onto the ret object, bypassing the tests loop.\n    // Hold this guy to execute in a moment.\n    function webforms() {\n        /*>>input*/\n        // Run through HTML5's new input attributes to see if the UA understands any.\n        // We're using f which is the <input> element created early on\n        // Mike Taylr has created a comprehensive resource for testing these attributes\n        //   when applied to all input types:\n        //   miketaylr.com/code/input-type-attr.html\n        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n\n        // Only input placeholder is tested while textarea's placeholder is not.\n        // Currently Safari 4 and Opera 11 have support only for the input placeholder\n        // Both tests are available in feature-detects/forms-placeholder.js\n        Modernizr['input'] = (function( props ) {\n            for ( var i = 0, len = props.length; i < len; i++ ) {\n                attrs[ props[i] ] = !!(props[i] in inputElem);\n            }\n            if (attrs.list){\n              // safari false positive's on datalist: webk.it/74252\n              // see also github.com/Modernizr/Modernizr/issues/146\n              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);\n            }\n            return attrs;\n        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));\n        /*>>input*/\n\n        /*>>inputtypes*/\n        // Run through HTML5's new input types to see if the UA understands any.\n        //   This is put behind the tests runloop because it doesn't return a\n        //   true/false like all the other tests; instead, it returns an object\n        //   containing each input type with its corresponding true/false value\n\n        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\n        Modernizr['inputtypes'] = (function(props) {\n\n            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {\n\n                inputElem.setAttribute('type', inputElemType = props[i]);\n                bool = inputElem.type !== 'text';\n\n                // We first check to see if the type we give it sticks..\n                // If the type does, we feed it a textual value, which shouldn't be valid.\n                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n                if ( bool ) {\n\n                    inputElem.value         = smile;\n                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';\n\n                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\n\n                      docElement.appendChild(inputElem);\n                      defaultView = document.defaultView;\n\n                      // Safari 2-4 allows the smiley as a value, despite making a slider\n                      bool =  defaultView.getComputedStyle &&\n                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\n                              // Mobile android web browser has false positive, so must\n                              // check the height to see if the widget is actually there.\n                              (inputElem.offsetHeight !== 0);\n\n                      docElement.removeChild(inputElem);\n\n                    } else if ( /^(search|tel)$/.test(inputElemType) ){\n                      // Spec doesn't define any special parsing or detectable UI\n                      //   behaviors so we pass these through as true\n\n                      // Interestingly, opera fails the earlier test, so it doesn't\n                      //  even make it here.\n\n                    } else if ( /^(url|email)$/.test(inputElemType) ) {\n                      // Real url and email support comes with prebaked validation.\n                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n\n                    } else {\n                      // If the upgraded input compontent rejects the :) text, we got a winner\n                      bool = inputElem.value != smile;\n                    }\n                }\n\n                inputs[ props[i] ] = !!bool;\n            }\n            return inputs;\n        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));\n        /*>>inputtypes*/\n    }\n    /*>>webforms*/\n\n\n    // End of test definitions\n    // -----------------------\n\n\n\n    // Run through all tests and detect their support in the current UA.\n    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\n    for ( var feature in tests ) {\n        if ( hasOwnProp(tests, feature) ) {\n            // run the test, throw the return value into the Modernizr,\n            //   then based on that boolean, define an appropriate className\n            //   and push it into an array of classes we'll join later.\n            featureName  = feature.toLowerCase();\n            Modernizr[featureName] = tests[feature]();\n\n            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\n        }\n    }\n\n    /*>>webforms*/\n    // input tests need to run.\n    Modernizr.input || webforms();\n    /*>>webforms*/\n\n\n    /**\n     * addTest allows the user to define their own feature tests\n     * the result will be added onto the Modernizr object,\n     * as well as an appropriate className set on the html element\n     *\n     * @param feature - String naming the feature\n     * @param test - Function returning true if feature is supported, false if not\n     */\n     Modernizr.addTest = function ( feature, test ) {\n       if ( typeof feature == 'object' ) {\n         for ( var key in feature ) {\n           if ( hasOwnProp( feature, key ) ) {\n             Modernizr.addTest( key, feature[ key ] );\n           }\n         }\n       } else {\n\n         feature = feature.toLowerCase();\n\n         if ( Modernizr[feature] !== undefined ) {\n           // we're going to quit if you're trying to overwrite an existing test\n           // if we were to allow it, we'd do this:\n           //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n           //   docElement.className = docElement.className.replace( re, '' );\n           // but, no rly, stuff 'em.\n           return Modernizr;\n         }\n\n         test = typeof test == 'function' ? test() : test;\n\n         if (typeof enableClasses !== \"undefined\" && enableClasses) {\n           docElement.className += ' ' + (test ? '' : 'no-') + feature;\n         }\n         Modernizr[feature] = test;\n\n       }\n\n       return Modernizr; // allow chaining.\n     };\n\n\n    // Reset modElem.cssText to nothing to reduce memory footprint.\n    setCss('');\n    modElem = inputElem = null;\n\n    /*>>shiv*/\n    /*! HTML5 Shiv v3.6.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */\n    ;(function(window, document) {\n    /*jshint evil:true */\n      /** Preset options */\n      var options = window.html5 || {};\n\n      /** Used to skip problem elements */\n      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n      /** Not all elements can be cloned in IE **/\n      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n      /** Detect whether the browser supports default html5 styles */\n      var supportsHtml5Styles;\n\n      /** Name of the expando, to work with multiple documents or to re-shiv one document */\n      var expando = '_html5shiv';\n\n      /** The id for the the documents expando */\n      var expanID = 0;\n\n      /** Cached data for each document */\n      var expandoData = {};\n\n      /** Detect whether the browser supports unknown elements */\n      var supportsUnknownElements;\n\n      (function() {\n        try {\n            var a = document.createElement('a');\n            a.innerHTML = '<xyz></xyz>';\n            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n            supportsHtml5Styles = ('hidden' in a);\n\n            supportsUnknownElements = a.childNodes.length == 1 || (function() {\n              // assign a false positive if unable to shiv\n              (document.createElement)('a');\n              var frag = document.createDocumentFragment();\n              return (\n                typeof frag.cloneNode == 'undefined' ||\n                typeof frag.createDocumentFragment == 'undefined' ||\n                typeof frag.createElement == 'undefined'\n              );\n            }());\n        } catch(e) {\n          supportsHtml5Styles = true;\n          supportsUnknownElements = true;\n        }\n\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Creates a style sheet with the given CSS text and adds it to the document.\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @param {String} cssText The CSS text.\n       * @returns {StyleSheet} The style element.\n       */\n      function addStyleSheet(ownerDocument, cssText) {\n        var p = ownerDocument.createElement('p'),\n            parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n        p.innerHTML = 'x<style>' + cssText + '</style>';\n        return parent.insertBefore(p.lastChild, parent.firstChild);\n      }\n\n      /**\n       * Returns the value of `html5.elements` as an array.\n       * @private\n       * @returns {Array} An array of shived element node names.\n       */\n      function getElements() {\n        var elements = html5.elements;\n        return typeof elements == 'string' ? elements.split(' ') : elements;\n      }\n\n        /**\n       * Returns the data associated to the given document\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Object} An object of data.\n       */\n      function getExpandoData(ownerDocument) {\n        var data = expandoData[ownerDocument[expando]];\n        if (!data) {\n            data = {};\n            expanID++;\n            ownerDocument[expando] = expanID;\n            expandoData[expanID] = data;\n        }\n        return data;\n      }\n\n      /**\n       * returns a shived element for the given nodeName and document\n       * @memberOf html5\n       * @param {String} nodeName name of the element\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived element.\n       */\n      function createElement(nodeName, ownerDocument, data){\n        if (!ownerDocument) {\n            ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n            return ownerDocument.createElement(nodeName);\n        }\n        if (!data) {\n            data = getExpandoData(ownerDocument);\n        }\n        var node;\n\n        if (data.cache[nodeName]) {\n            node = data.cache[nodeName].cloneNode();\n        } else if (saveClones.test(nodeName)) {\n            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n        } else {\n            node = data.createElem(nodeName);\n        }\n\n        // Avoid adding some elements to fragments in IE < 9 because\n        // * Attributes like `name` or `type` cannot be set/changed once an element\n        //   is inserted into a document/fragment\n        // * Link elements with `src` attributes that are inaccessible, as with\n        //   a 403 response, will cause the tab/window to crash\n        // * Script elements appended to fragments will execute when their `src`\n        //   or `text` property is set\n        return node.canHaveChildren && !reSkip.test(nodeName) ? data.frag.appendChild(node) : node;\n      }\n\n      /**\n       * returns a shived DocumentFragment for the given document\n       * @memberOf html5\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived DocumentFragment.\n       */\n      function createDocumentFragment(ownerDocument, data){\n        if (!ownerDocument) {\n            ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n            return ownerDocument.createDocumentFragment();\n        }\n        data = data || getExpandoData(ownerDocument);\n        var clone = data.frag.cloneNode(),\n            i = 0,\n            elems = getElements(),\n            l = elems.length;\n        for(;i<l;i++){\n            clone.createElement(elems[i]);\n        }\n        return clone;\n      }\n\n      /**\n       * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n       * @private\n       * @param {Document|DocumentFragment} ownerDocument The document.\n       * @param {Object} data of the document.\n       */\n      function shivMethods(ownerDocument, data) {\n        if (!data.cache) {\n            data.cache = {};\n            data.createElem = ownerDocument.createElement;\n            data.createFrag = ownerDocument.createDocumentFragment;\n            data.frag = data.createFrag();\n        }\n\n\n        ownerDocument.createElement = function(nodeName) {\n          //abort shiv\n          if (!html5.shivMethods) {\n              return data.createElem(nodeName);\n          }\n          return createElement(nodeName, ownerDocument, data);\n        };\n\n        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n          'var n=f.cloneNode(),c=n.createElement;' +\n          'h.shivMethods&&(' +\n            // unroll the `createElement` calls\n            getElements().join().replace(/\\w+/g, function(nodeName) {\n              data.createElem(nodeName);\n              data.frag.createElement(nodeName);\n              return 'c(\"' + nodeName + '\")';\n            }) +\n          ');return n}'\n        )(html5, data.frag);\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivDocument(ownerDocument) {\n        if (!ownerDocument) {\n            ownerDocument = document;\n        }\n        var data = getExpandoData(ownerDocument);\n\n        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n          data.hasCSS = !!addStyleSheet(ownerDocument,\n            // corrects block display not defined in IE6/7/8/9\n            'article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +\n            // adds styling not present in IE6/7/8/9\n            'mark{background:#FF0;color:#000}'\n          );\n        }\n        if (!supportsUnknownElements) {\n          shivMethods(ownerDocument, data);\n        }\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * The `html5` object is exposed so that more elements can be shived and\n       * existing shiving can be detected on iframes.\n       * @type Object\n       * @example\n       *\n       * // options can be changed before the script is included\n       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n       */\n      var html5 = {\n\n        /**\n         * An array or space separated string of node names of the elements to shiv.\n         * @memberOf html5\n         * @type Array|String\n         */\n        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',\n\n        /**\n         * A flag to indicate that the HTML5 style sheet should be inserted.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivCSS': (options.shivCSS !== false),\n\n        /**\n         * Is equal to true if a browser supports creating unknown/HTML5 elements\n         * @memberOf html5\n         * @type boolean\n         */\n        'supportsUnknownElements': supportsUnknownElements,\n\n        /**\n         * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n         * methods should be overwritten.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivMethods': (options.shivMethods !== false),\n\n        /**\n         * A string to describe the type of `html5` object (\"default\" or \"default print\").\n         * @memberOf html5\n         * @type String\n         */\n        'type': 'default',\n\n        // shivs the document according to the specified `html5` object options\n        'shivDocument': shivDocument,\n\n        //creates a shived element\n        createElement: createElement,\n\n        //creates a shived documentFragment\n        createDocumentFragment: createDocumentFragment\n      };\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose html5\n      window.html5 = html5;\n\n      // shiv the document\n      shivDocument(document);\n\n    }(this, document));\n    /*>>shiv*/\n\n    // Assign private properties to the return object with prefix\n    Modernizr._version      = version;\n\n    // expose these for the plugin API. Look in the source for how to join() them against your input\n    /*>>prefixes*/\n    Modernizr._prefixes     = prefixes;\n    /*>>prefixes*/\n    /*>>domprefixes*/\n    Modernizr._domPrefixes  = domPrefixes;\n    Modernizr._cssomPrefixes  = cssomPrefixes;\n    /*>>domprefixes*/\n\n    /*>>mq*/\n    // Modernizr.mq tests a given media query, live against the current state of the window\n    // A few important notes:\n    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\n    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\n    //   * You must specify values. Eg. If you are testing support for the min-width media query use:\n    //       Modernizr.mq('(min-width:0)')\n    // usage:\n    // Modernizr.mq('only screen and (max-width:768)')\n    Modernizr.mq            = testMediaQuery;\n    /*>>mq*/\n\n    /*>>hasevent*/\n    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n    // Modernizr.hasEvent('gesturestart', elem)\n    Modernizr.hasEvent      = isEventSupported;\n    /*>>hasevent*/\n\n    /*>>testprop*/\n    // Modernizr.testProp() investigates whether a given style property is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testProp('pointerEvents')\n    Modernizr.testProp      = function(prop){\n        return testProps([prop]);\n    };\n    /*>>testprop*/\n\n    /*>>testallprops*/\n    // Modernizr.testAllProps() investigates whether a given style property,\n    //   or any of its vendor-prefixed variants, is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testAllProps('boxSizing')\n    Modernizr.testAllProps  = testPropsAll;\n    /*>>testallprops*/\n\n\n    /*>>teststyles*/\n    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\n    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\n    Modernizr.testStyles    = injectElementWithStyles;\n    /*>>teststyles*/\n\n\n    /*>>prefixed*/\n    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n\n    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\n    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\n    //\n    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\n\n    // If you're trying to ascertain which transition end event to bind to, you might do something like...\n    //\n    //     var transEndEventNames = {\n    //       'WebkitTransition' : 'webkitTransitionEnd',\n    //       'MozTransition'    : 'transitionend',\n    //       'OTransition'      : 'oTransitionEnd',\n    //       'msTransition'     : 'MSTransitionEnd',\n    //       'transition'       : 'transitionend'\n    //     },\n    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n\n    Modernizr.prefixed      = function(prop, obj, elem){\n      if(!obj) {\n        return testPropsAll(prop, 'pfx');\n      } else {\n        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n        return testPropsAll(prop, obj, elem);\n      }\n    };\n    /*>>prefixed*/\n\n\n    /*>>cssclasses*/\n    // Remove \"no-js\" class from <html> element, if it exists:\n    docElement.className = docElement.className.replace(/(^|\\s)no-js(\\s|$)/, '$1$2') +\n\n                            // Add the new classes to the <html> element.\n                            (enableClasses ? ' js ' + classes.join(' ') : '');\n    /*>>cssclasses*/\n\n    return Modernizr;\n\n})(this, this.document);\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = window.Modernizr}.call(window));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bower_components/modernizr/modernizr.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = noisy;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"noisy\"\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}